#!/usr/bin/env tclsh

package require Expect

if { [llength $argv] != 1 } {
    send_user "usage:  mhssh X.Y\n"
    send_user "    where ip address is 11.1.X.Y\n"
    exit 1
}

set arg0 [lindex $argv 0]
set octets [split $arg0 "."]
set ip ""

if { [llength $octets] == 2 } {
    set ip "11.1.$arg0"
} {
    set ip $arg0
}

set good 0

# here's a neat bug. if you have "-timeout 1 abort", and you run
# this command a hundred times, 3 or 4 times the timeout will fire
# in milliseconds.

# you would think if you entered expect with a timeout, that it would
# start a timer at that instant. that does not appear to be the case.

# expect appears to have an internal clock that's ticking all the time,
# and so 'timeout' is not relative to when you entered 'expect', but
# rather a count of clock ticks that must pass. so if you enter 'expect'
# three microseconds before a tick, a "timeout 1" expires
# three microseconds later.

# that is... undesirable. work around it by using "timeout 2".

spawn ping -i 1 -c 1 $ip
expect {
    "1 received" { set good 1 }
    "0 received" { set good 0 }
    -timeout 2 abort
}

if { $good == 0 } {
    send_user "cannot ping host! giving up\n"
    exit 1
}

spawn ssh-keygen -R $ip
expect eof

spawn xtermbar mhssh:$arg0
expect eof

# useful for debug
# exp_internal 1

trap {
    set rows [stty rows]
    set cols [stty columns]
    stty rows $rows columns $cols < $spawn_out(slave,name)
} SIGWINCH

set sshpid [spawn sh -c "ssh -o \"StrictHostKeyChecking no\" -l root $ip"]

# TODO add custom prompts here....
# $env(HOME)
# file exists $filename
# source $mhssh_customization_file
# QUESTION: how to add custom expect strings to an expect {clause}.

expect {
    "password:"  { send "root\r" }
    "# " { }
    "$ " { }
    "% " { }
    -timeout 2 abort
}

interact

exit
