#!/bin/bash

# simple mode:
#     git root - print the root directory of the current repo,
#                or print nothing if not in a repo.

# script mode:
#     git root -v - emit several ksh-style variable assignments
#                   that a script could use for various purposes.
#
#              gitdir="/path/to/.git"
#              gr="same as ${gitroot[0]}"
#              gh="same as ${githead[x]}"
#              gitnummods=1  --- count of modname[] and head[] entries
#
#              gitroot[x]="root dir of working tree or submod"
#              gitsubdir[x]="path to the .git dir for this repo"
#              gitrelpath[x]="current dir within this repo"
#              gitmodname[x]="dir name of working tree root or submod"
#              githead[x]="branch or commit id for HEAD"
#
#              gitrelpath="current directory relative to last $gitroot"
#

vars=0

if [[ "x$1" == "x-v" ]] ; then
    vars=1
fi

if [[ "x$2" == "x-d" ]] ; then
    dbg() {
	echo DEBUG: "$@"
    }
    real() {
        echo REAL: "$@"
    }
else
    dbg() {
	true
    }
    real() {
        echo "$@"
    }
fi

# read "HEAD" and parse a ref name or shortened commit ID from it
# $1 : topdir
parseHEAD() {
    local head
    cd "$1"
    gitdir="$(git rev-parse --git-dir)"
    if [[ "$gitdir" == "." ]] ; then
        gitdir="$PWD"
    fi
    head="$(cat "$gitdir/HEAD" 2> /dev/null)"
    IFS="/"
    set -- $head
    IFS=" "
    if [[ "x$1" == "xref: refs" ]] ; then
        gh="${head#ref: refs/heads/}"
    else
        gh="${head:0:7}"
    fi
}

if [[ "x$(git rev-parse --is-inside-git-dir 2> /dev/null)" == xtrue ]] ; then
    # if we're inside the .git dir or a bare repo, special values ensue.
    parseHEAD "$PWD"
    real gitdir=\"$gitdir\"
    real gr=\"$gitdir\"
    rp="${PWD#$gitdir}"
    rp="${rp#/}"
    if [[ "$rp" == "" ]] ; then
        rp=.
    fi
    modname="${gitdir##*/}"
    if [[ "$modname" == ".git" ]] ; then
        parentdir="${gitdir%/.git}"
        modname="${parentdir##*/}/.git"
    fi
    real gitrelpath=\"$rp\"
    real gitnummods=1
    real gitroot[0]=\"$gitdir\"
    real gitsubdir[0]=\"$gitdir\"
    real gitrelpath[0]=\"$rp\"
    real gitmodname[0]=\"${modname}\"
    real githead[0]=\"$gh\"
    exit 0
else
    gitdir="$(git rev-parse --git-dir 2> /dev/null)"
fi

# if not in a git repo, vars get nulled out.
if [[ "x$gitdir" == "x" ]] ; then
    if [[ $vars == 1 ]] ; then
	real gr=''
	real gitdir=''
	real gitrelpath=''
	real gitnummods=0
    fi
    exit 0
fi

getrelpath() {
    rp="$(git rev-parse --show-prefix)"
    rp="${rp%/}"
}

toplevel="$(git rev-parse --show-toplevel 2> /dev/null)"
tops[0]="$toplevel"
modname[0]="${toplevel##*/}"
gr="$toplevel"

getrelpath
gitrelpath="$rp"
rels[0]="$rp"

parseHEAD "$toplevel"
dotgit[0]="$gitdir"
heads[0]="$gh"
gitnummods=1

{
    d="$toplevel"
    while true ; do
        cd "$d"
        d="$(git rev-parse --show-superproject-working-tree)"
        if [[ "x$d" != "x" ]] ; then
            tops[$gitnummods]="$d"
            cd ..
            getrelpath
            rels[$gitnummods]="$rp"
            parseHEAD "$d"
            dotgit[$gitnummods]="$gitdir"
            heads[$gitnummods]="$gh"
            modname[$gitnummods]="${d##*/}"
            (( gitnummods ++ ))
            gr="$d"
        else
            break
        fi
    done
}

# now reverse the stack and it put in proper
# order, where the superrepo is index 0

if [[ $vars == 1 ]] ; then
    real gr=\"$gr\"
    real gitnummods=$gitnummods
    index=$gitnummods
    count=0
    while [[ $count -lt $gitnummods ]] ; do
        (( index-- ))
        real gitroot[$count]=\"${tops[$index]}\"
        real githead[$count]=\"${heads[$index]}\"
        real gitsubdir[$count]=\"${dotgit[$index]}\"
        real gitrelpath[$count]=\"${rels[$index]}\"
        real gitmodname[$count]=\"${modname[$index]}\"
        (( count++ ))
    done
    real gitrelpath=\"$gitrelpath\"
else
    real $gr
fi

exit 0
