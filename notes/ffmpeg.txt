
ffmpeg \
-i "$infile" \
-strict experimental \
-c:v libx264 \
-preset fast \
-crf $crf \
-c:a aac \
-copyts \
"$outfile"

crf is 18 (perfect) to 28 (not so perfect)
if flv has vp6f and mp3, -c:v libx264 -preset slow -crf $crf -c:a aac
if flv has h264 and aac, use -c copy

ffprobe raw.mov
duration=`ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$input"`

---extract video, delete audio

# in out
extract_video_copy() {
    in="$1" # i.e. mov
    out="$2" # i.e. mp4 or mov
    ffmpeg -i "$in" -strict experimental -c:v copy -an -y "$out"
}

---extract video, convert to h264, delete audio

# in out
extract_video_cvth264() {
    in="$1" # i.e. mov
    out="$2" # i.e. mp4
    ffmpeg -i "$in" -strict experimental -c:v libx264 \
        -preset fast -crf 18 -an -y "$out"
}

---extract audio, delete video (keep audio in original aac format)

# in out
extract_audio_orig() {
    in="$1"
    out="$2" # i.e. aac
    ffmpeg -i "$in" -strict experimental -vn -c:a copy -y "$out"
}

---extract audio, delete video (convert to signed 32bit LE WAV)

# in out
extract_audio_wav() {
    in="$1"
    out="$2"  # i.e. wav
    ffmpeg -i "$in" -strict experimental -vn -c:a pcm_s32le -y "$out"
}

---stupid MTS files from canon camera requires a special filter to make
   good video:

# in out
deinterlace_mts() {
    in="$1"  # i.e.  mts
    out="$2" # i.e.  mp4
    ffmpeg -i "$in" -strict experimental -c:v libx264 \
        -vf yadif=parity=auto -preset slow -crf 18 \
	-c:a copy -copyts -y "$out"
}

---convert H264 file from raspivid to mp4

# in out
cvt_raspih264() {
    in="$1"   # input.h264
    out="$2"  #  mp4
    ffmpeg -i "$in" -c:v copy -an -y "$out"
}

raspivid -b 2000000 -t 0 -n -rot 180 -l -o tcp://0.0.0.0:3333
vlc tcp/h264://10.0.0.23:3333
i2 -v -o video.h264 10.0.0.23 3333

---combining video from one file and audio from another, this assumes
   input video has no audio track at all.

ffmpeg -i video.mp4 -i audio.wav -c:v copy -c:a aac output.mp4

---If your input video already contains audio, and you want to
replace it, you need to tell ffmpeg which audio stream to take:

ffmpeg -i video.mp4 -i audio.wav -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 output.mp4

You can also use "-shortest" to cut the end.

---extract a jpg from a position in the video

output=file.jpg
ffmpeg -y -i "$input" -ss $half_duration -vframes 1 -q:v 2 -s 256x160 $output

--changing frame rate.
ffmpeg -i <input> -filter:v fps=fps=30 <output>

--changing resolution to 1920x1080
ffmpeg -i <input> -vf "scale=1920:1080" <output>

note "-vf" and "-filter:v" are the same thing.


--changing audio sample rate

-ar 48000

--downmixing 5.1 surround to 2-channel stereo (DTS)
  (why does "dca" mean "dts" ?)

-c:a dca -ac 2

--downmixing 5.1 surround to 2-channel stereo (AAC)
  NOTE AAC doesn't work on 5.1 audio !
       must downconvert to 2 channel! (-ac 2 required)

-c:a dca -ac 2

--interesting article about downmixing:

https://superuser.com/questions/852400/properly-downmix-5-1-to-stereo-using-ffmpeg

--converting a high res movie with several 5.1 audio tracks to ipad

nice ffmpeg -i $in1 -strict experimental \
       -map 0:0 -c:v libx264 \
            -x264-params keyint=15 -b:v $vrate \
       -map 0:1 -c:a aac -ac 2 \
       -y $out1

--cutting a specific piece out of a file.

startpos=1020
duration=239

-t duration
or
-to position

ffmpeg -i input.mp4 -ss $startpos -t $duration -vcodec copy -acodec copy -y output.mp4
 

ffmpeg -f lavfi -i testsrc=duration=10:size=854x480:rate=60 \
-vf "drawtext=text=%{n}:fontsize=72:r=60:x=(w-tw)/2: y=h-(2*lh):fontcolor=white:box=1:boxcolor=0x00000099" test.mp4

This 10 second, 60 fps video called test.mp4 will show the frame count
at the bottom, and a second counter in the middle of the frame. By
playing the output in a player that allows seeking frame-by-frame, you
can inspect which frames have been dropped or duplicated.


motion interpolation

ffmpeg -i input.mkv -filter:v "minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120'" output.mkv

Using a complex filtergraph, you can speed up video and audio at the same time:

ffmpeg -i input.mkv -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]" -map "[v]" -map "[a]" output.mkv



change video bitrate

input=output0001-76102.mp4
output=final.mp4
rate=1000k
ffmpeg -i $input -strict experimental -c:v libx264 -x264-params keyint=15 -b:v $rate -c:a copy $output

# args : infile outfile rate
rerate() {
    infile="$1"
    outfile="$2"
    rate="$3"
    keying="-x264-params keyint=15"
    #fps="-filter:v fps=fps=30"
    video="-strict experimental -c:v libx264 $keying $fps -b:v $rate"
    audio="-c:a copy"
    ffmpeg -i $infile $video $audio $outfile
}

You can see private options like this: ffmpeg -h encoder=mjpeg.


sometimes you may have to hexedit a WAV
to change 48000 (80 bb) to 44100 (44 ac)'

change audio bitrate

input=
output=
outrate=48000

ffmpeg -i $input -ar $outrate -y $output


--- rotate video 90 degrees by reencoding
ffmpeg -i input.mp4 -vf "transpose=1" output.mp4
0 : ccw and flip vertically
1 : cw
2 : ccw
3 : cw and flip vertically

--- rotate video 90 degrees by changing meta-data
ffmpeg -i input.mp4 -c copy -metadata:s:v:0 rotate=90 output.mp4

make list.txt:

file 'b01.mp4'
file 'b02.mp4'
file 'b03.mp4'
file 'b04.mp4'
file 'b05.mp4'
file 'b06.mp4'

ffmpeg -f concat -safe 0 -i list.txt -c copy -y c.mp4



--- animated gif -> mp4!

- extract frames
ffmpeg -i input.gif -vsync 0 output/output%d.png

- convert to mp4
ffmpeg -i input.gif \
       -movflags faststart -pix_fmt yuv420p \
       -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" \
       -y output.mp4

--- mp4 -> animated gif!

- extract a usable quality palette from the video
  (makes the output file a lot smaller)
ffmpeg -i InputFile.mp4 \
  -vf "fps=10,scale=320:-1:flags=lanczos,palettegen" \
  -y palette.png

- convert MP4 to gif using palette
ffmpeg -i InputFile.mp4 \
  -i palette.png \
  -filter_complex "fps=10,scale=320:-1:flags=lanczos[x];[x][1:v]paletteuse" \
  -an -y OutputFile.gif

rm -f palette.png



-------- blender

blender doesn't like videos that aren't one of its preconfigured
frame-rates, so use the FPS filter to convert the video portion,
e.g. to 30 fps.

sometimes blender doesn't like the audio, where the graphical
representation of audio doesn't line up with the actual audio heard.
to fix, extract and convert the audio track to WAV with the pcm_s32le
filter above.  then drop into blender and calculate the error in
length.

e.g.  original audio shows as 9524 frames long
       but new audio shows as 9397 frames long.
this is a ratio of 0.986665267
so hexedit the wav file to change the original
sample rate (e.g. 44100==0xAC44, remember its little endian)
to a new sample rate such as 43512 (0xA9F8).
then use ffmpeg to convert that audio file to the new
sample rate using the -ar argument.

# 9397 / 9524  = 0.986665267
# 0.986665267Ã—44100 = 43512

when you drop the new audio file into blender it should
show up as the correct length and what you hear should match
what's showing in the display -- and most importantly, should
match up to the video.
