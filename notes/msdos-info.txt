
struct dos_partition {
        u_int8_t        dp_flag;        /* bootstrap flags */
        u_int8_t        dp_shd;         /* starting head */
        u_int8_t        dp_ssect;       /* starting sector */
        u_int8_t        dp_scyl;        /* starting cylinder */
        u_int8_t        dp_typ;         /* partition type (see below) */
        u_int8_t        dp_ehd;         /* end head */
        u_int8_t        dp_esect;       /* end sector */
        u_int8_t        dp_ecyl;        /* end cylinder */
        u_int32_t       dp_start;       /* absolute starting sector number */
        u_int32_t       dp_size;        /* partition size in sectors */
};

/* Known DOS partition types. */
#define DOSPTYP_UNUSED  0x00            /* Unused partition */
#define DOSPTYP_FAT12   0x01            /* 12-bit FAT */
#define DOSPTYP_FAT16S  0x04            /* 16-bit FAT, less than 32M */
#define DOSPTYP_EXTEND  0x05            /* Extended; contains sub-partitions */
#define DOSPTYP_FAT16B  0x06            /* 16-bit FAT, more than 32M */
#define DOSPTYP_FAT32   0x0b            /* 32-bit FAT */
#define DOSPTYP_FAT32L  0x0c            /* 32-bit FAT, LBA-mapped */
#define DOSPTYP_FAT16L  0x0e            /* 16-bit FAT, LBA-mapped */
#define DOSPTYP_ONTRACK 0x54
#define DOSPTYP_LINUX   0x83            /* That other thing */
#define DOSPTYP_FREEBSD 0xa5            /* FreeBSD partition type */
#define DOSPTYP_OPENBSD 0xa6            /* OpenBSD partition type */
#define DOSPTYP_NETBSD  0xa9            /* NetBSD partition type */

struct bootsector50 {
        u_int8_t        bsJump[3];              /* jump inst E9xxxx or EBxx90 */
        int8_t          bsOemName[8];           /* OEM name and version */
        int8_t          bsBPB[25];              /* BIOS parameter block */
        int8_t          bsExt[26];              /* Bootsector Extension */
        int8_t          bsBootCode[448];        /* pad so structure is 512b */
        u_int8_t        bsBootSectSig0;
        u_int8_t        bsBootSectSig1;
#define BOOTSIG0        0x55
#define BOOTSIG1        0xaa
};

struct bootsector710 {
        u_int8_t        bsJump[3];              /* jump inst E9xxxx or EBxx90 */
        int8_t          bsOEMName[8];           /* OEM name and version */
        int8_t          bsPBP[53];              /* BIOS parameter block */
        int8_t          bsExt[26];              /* Bootsector Extension */
        int8_t          bsBootCode[418];        /* pad so structure is 512b */
        u_int8_t        bsBootSectSig2;         /* 2 & 3 are only defined for FA
T32? */
        u_int8_t        bsBootSectSig3;
        u_int8_t        bsBootSectSig0;
        u_int8_t        bsBootSectSig1;
#define BOOTSIG0        0x55
#define BOOTSIG1        0xaa
#define BOOTSIG2        0
#define BOOTSIG3        0
};

struct bpb50 {
        u_int16_t       bpbBytesPerSec; /* bytes per sector */
        u_int8_t        bpbSecPerClust; /* sectors per cluster */
        u_int16_t       bpbResSectors;  /* number of reserved sectors */
        u_int8_t        bpbFATs;        /* number of FATs */
        u_int16_t       bpbRootDirEnts; /* number of root directory entries */
        u_int16_t       bpbSectors;     /* total number of sectors */
        u_int8_t        bpbMedia;       /* media descriptor */
        u_int16_t       bpbFATsecs;     /* number of sectors per FAT */
        u_int16_t       bpbSecPerTrack; /* sectors per track */
        u_int16_t       bpbHeads;       /* number of heads */
        u_int32_t       bpbHiddenSecs;  /* # of hidden sectors */
        u_int32_t       bpbHugeSectors; /* # of sectors if bpbSectors == 0 */
};

struct bpb710 {
        u_int16_t       bpbBytesPerSec; /* bytes per sector */
        u_int8_t        bpbSecPerClust; /* sectors per cluster */
        u_int16_t       bpbResSectors;  /* number of reserved sectors */
        u_int8_t        bpbFATs;        /* number of FATs */
        u_int16_t       bpbRootDirEnts; /* number of root directory entries */
        u_int16_t       bpbSectors;     /* total number of sectors */
        u_int8_t        bpbMedia;       /* media descriptor */
        u_int16_t       bpbFATsecs;     /* number of sectors per FAT */
        u_int16_t       bpbSecPerTrack; /* sectors per track */
        u_int16_t       bpbHeads;       /* number of heads */
        u_int32_t       bpbHiddenSecs;  /* # of hidden sectors */
        u_int32_t       bpbHugeSectors; /* # of sectors if bpbSectors == 0 */
        u_int32_t       bpbBigFATsecs;  /* like bpbFATsecs for FAT32 */
        u_int16_t       bpbExtFlags;    /* extended flags: */
#define FATNUM          0xf             /* mask for numbering active FAT */
#define FATMIRROR       0x80            /* FAT is mirrored (like it always was) 
*/
        u_int16_t       bpbFSVers;      /* filesystem version */
#define FSVERS          0               /* currently only 0 is understood */
        u_int32_t       bpbRootClust;   /* start cluster for root directory */
        u_int16_t       bpbFSInfo;      /* filesystem info structure sector */
        u_int16_t       bpbBackup;      /* backup boot sector */
        /* There is a 12 byte filler here, but we ignore it */
};

/*
 * FAT32 FSInfo block.
 */
struct fsinfo {
        u_int8_t fsisig1[4];
        u_int8_t fsifill1[480];
        u_int8_t fsisig2[4];
        u_int8_t fsinfree[4];
        u_int8_t fsinxtfree[4];
        u_int8_t fsifill2[12];
        u_int8_t fsisig3[4];
        u_int8_t fsifill3[508];
        u_int8_t fsisig4[4];
};

/*
 * Structure of a dos directory entry.
 */
struct direntry {
        u_int8_t        deName[8];      /* filename, blank filled */
#define SLOT_EMPTY      0x00            /* slot has never been used */
#define SLOT_E5         0x05            /* the real value is 0xe5 */
#define SLOT_DELETED    0xe5            /* file in this slot deleted */
        u_int8_t        deExtension[3]; /* extension, blank filled */
        u_int8_t        deAttributes;   /* file attributes */
#define ATTR_NORMAL     0x00            /* normal file */
#define ATTR_READONLY   0x01            /* file is readonly */
#define ATTR_HIDDEN     0x02            /* file is hidden */
#define ATTR_SYSTEM     0x04            /* file is a system file */
#define ATTR_VOLUME     0x08            /* entry is a volume label */
#define ATTR_DIRECTORY  0x10            /* entry is a directory name */
#define ATTR_ARCHIVE    0x20            /* file is new or modified */
        u_int8_t        deLowerCase;    /* case for base and extension */
#define CASE_LOWER_BASE 0x08            /* base is lower case */
#define CASE_LOWER_EXT  0x10            /* extension is lower case */
        u_int8_t        deCTimeHundredth; /* create time, 1/100th of a sec */
        u_int8_t        deCTime[2];     /* create time */
        u_int8_t        deCDate[2];     /* create date */
        u_int8_t        deADate[2];     /* access date */
        u_int8_t        deHighClust[2]; /* high byte of cluster number */
        u_int8_t        deMTime[2];     /* last update time */
        u_int8_t        deMDate[2];     /* last update date */
        u_int8_t        deStartCluster[2]; /* starting cluster of file */
        u_int8_t        deFileSize[4];  /* size of file in bytes */
};

/*
 * Structure of a Win95 long name directory entry
 */
struct winentry {
        u_int8_t        weCnt;
#define WIN_LAST        0x40
#define WIN_CNT         0x3f
        u_int8_t        wePart1[10];
        u_int8_t        weAttributes;
#define ATTR_WIN95      0x0f
        u_int8_t        weReserved1;
        u_int8_t        weChksum;
        u_int8_t        wePart2[12];
        u_int16_t       weReserved2;
        u_int8_t        wePart3[4];
};
#define WIN_CHARS       13      /* Number of chars per winentry */

#define MSDOSFSROOT     0               /* cluster 0 means the root dir */
#define CLUST_FREE      0               /* cluster 0 also means a free cluster */
#define MSDOSFSFREE     CLUST_FREE
#define CLUST_FIRST     2               /* first legal cluster number */
#define CLUST_RSRVD     0xfffffff6      /* reserved cluster range */
#define CLUST_BAD       0xfffffff7      /* a cluster with a defect */
#define CLUST_EOFS      0xfffffff8      /* start of eof cluster range */
#define CLUST_EOFE      0xffffffff      /* end of eof cluster range */

#define FAT12_MASK      0x00000fff      /* mask for 12 bit cluster numbers */
#define FAT16_MASK      0x0000ffff      /* mask for 16 bit cluster numbers */
#define FAT32_MASK      0x0fffffff      /* mask for FAT32 cluster numbers */
