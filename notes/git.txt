
to list tags:
git tag

to get info on a particular tag:
git tag -v v3.11

to apply a plain tag which is just a pointer to a commit:
git tag v3.11

to apply a signed tag:
git tag -u C8822DA5 -s v3.11 -m 'version v3.11 release'

git push --tags
<or>
git push origin v3.11

one time, and one time only, you need to do
   git lfs install
this will update ~/.gitconfig with lfs stuff like filters and smudges.
once that exists, "install" never needs to be run again.

within a repo that has lfs enabled, use
   git lfs track '*.pattern'
this will update .gitattributes with a line that references this
pattern, like so:
   *.bin filter=lfs diff=lfs merge=lfs -text

to reduce the number of files in .git:
   git gc --aggressive

see the space in use in .git:

   find .git -type f | wc -l ; du -ks .git
(or in a bare repo:)
   find . -type f | wc -l ; du -ks .

if 'git fsck' says there's dangling blobs, you can clean them with:

   git reflog expire --expire=now --all
   git gc --prune=now --aggressive
   git lfs prune

with submodules:

   git submodule foreach git reflog expire --expire=now --all
   git submodule foreach git gc --prune=now --aggressive
   git submodule foreach git lfs prune

you can also force a module to fully populate the entire lfs version
tree (i.e. for mirroring)

   git lfs fetch --all

to mirror a repo from one place to another:
   git clone --bare SOURCE-URL
   cd thingy.git
   git lfs fetch --all
   git remote add newthingy DESTINATION-URL
   git push --mirror newthingy        (will delete branches on newthingy)
        or
   git push newthingy --all --force   (which wont delete branches on newth)
   git lfs push --all newthingy

note that lfs does NOT work with a local repo. the git-lfs client
ONLY supports http or https servers. there is an lfs-test-server
program you can use (gross).

if you pushed a commit to github but didn't mean to, you can push again
to roll it back:
   git push -f origin HEAD^:master
or
   git push -f origin <sha_of_previous_commit>:master

if you pushed a tag, but it was on the wrong version:

$ git tag -d v1.0.0
$ git push origin :refs/tags/v1.0.0
$ git tag v1.0.0
$ git push origin --tags

if you want to delete a local tracking branch for a remote repo:

git branch -rd origin/pfk-1_3_7

to delete a branch on a remote repo:

git push origin --delete pfk-1_3_7

see environ/dot-gitconfig for stuff to put in ~/.gitconfig


to see 'git status' for all submodules:
git status --recursive

git config --global status.submodulesummary 1


to see all commits affecting a file, you can do:
  git log filename
however if the file is renamed or moved to another dir, it will
lose the thread. to handle renames/moves:
  git log --follow filename
you can also add '--all' to include branches other than the
current branch.

you can make 'gitk' show you all commits affecting a file regardless
of branch, local, reflog, and remote: (same args can go to git-log)

  gitk --all --first-parent --remotes --reflog --author-date-order -- filename

git log --follow --name-status --format='%H' -- <path>
git log --follow --name-only --format='%H' -- <path>

you can get all the commits affecting a specific PART of a file, too.

  git log --pretty=short -u -L <upperLimit>,<lowerLimit>:<path_to_filename>

https://stackoverflow.com/questions/18222634/given-a-git-refname-can-i-detect-whether-its-a-hash-tag-or-branch

git show-ref --verify refs/tags/$thestring
git show-ref --verify refs/heads/$thestring
git rev-parse --verify refs/heads/$thestring

stage a particular submodule hash to the index:

   git update-index --cacheinfo 160000 <SHA-ID> <submod>

https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux
git://git.denx.de/u-boot.git
https://kernel.googlesource.com/pub/scm/linux/hotplug/udev
