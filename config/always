# -*- Mode:makefile-gmake; tab-width:8 -*-

PFK_USER_NAME := $(shell whoami)
PFK_USER_ID := $(shell id -u)
PFK_GROUP_ID := $(shell id -g)
UNAMES= /bin/uname /usr/bin/uname /sbin/uname /usr/sbin/uname
PFK_UNAME_PATH := $(firstword $(wildcard $(UNAMES)))
BUILD_DATE := $(shell date '+%Y-%m%d-%H%M%S')
GIT_SRC_URL := https://github.com/flipk/pfkutils
DOT_FILES = \
	Xresources ctwmrc twmrc hexdump_format \
	screenrc xinitrc vnc-xstartup
PREPROC_DOT_FILES = \
	kshrc profile xsession

ifeq ($(WARNINGS),1)
CXXFLAGS += -Wall -Wformat=2
endif
ifeq ($(ERRORS),1)
CXXFLAGS += -Werror
endif

MAGIT_ELISP_FILES= \
magit-apply.el magit-autorevert.el magit-bisect.el magit-blame.el magit-branch.el magit-commit.el magit-core.el magit-diff.el magit-ediff.el magit-extras.el magit-files.el magit-git.el magit-log.el magit-margin.el magit-mode.el magit-notes.el magit-obsolete.el magit-popup.el magit-process.el magit-refs.el magit-remote.el magit-repos.el magit-section.el magit-sequence.el magit-stash.el magit-status.el magit-submodule.el magit-subtree.el magit-utils.el magit-wip.el magit-worktree.el magit.el git-commit.el git-gutter.el git-rebase.el git-timemachine.el

ELISP_FILES = emacs-lone.el go-mode.el xcscope.el \
	colir.el counsel.el ivy-hydra.el ivy-overlay.el \
	ivy-test.el ivy.el swiper.el $(MAGIT_ELISP_FILES) \
	dash-functional.el dash.el with-editor.el protobuf-mode.el
PREPROC_ELISP_FILES = emacs.el
SCRIPT_FILES = \
	architecture changed doxtrms ec ec1 ec2 ec3 ec4 ec5 ec6 ec7 ec8 \
	git-diff-helper.sh git-merge-helper.sh make_linux_cscope mcs \
	myemacs-checkout-helper myemacs-cscope-rebuild-helper \
	pfkterm refresh set-background.sh myemacs-compile \
	git-lsm git-lso git-mcs git-root x11-capture volmon.sh dodmsg \
	$(SCRIPT_FILES_EXTRA) git-mygc
PREPROC_SCRIPT_FILES = \
	cs emacs-lone myemacs-cscope-helper myshell-launcher \
	myshell pf_frontend
#notused
#SHELLS= /bin/bash /bin/ksh /bin/sh
#SHELL_PATH := $(firstword $(wildcard $(SHELLS)))

# install info
prefix := $(HOME)/pfk
ETCDIR := $(prefix)/etc
ETCBAKDIR := $(prefix)/etc-backup
EMACSDIR := $(ETCDIR)/emacs
SCRIPTS_DIR := $(prefix)/bin
INSTALL_BIN_DIR := $(prefix)/$(PFKARCH)/bin
INSTALL_LIB_DIR := $(prefix)/$(PFKARCH)/lib
INSTALL_INC_DIR := $(prefix)/include
INSTALL_MAN_DIR := $(prefix)/man
VNCDIR := $(HOME)/.vnc

##############################################

installdirs:
	$(Q)mkdir -p $(prefix) $(ETCDIR) $(SCRIPTS_DIR) $(EMACSDIR) \
		$(INSTALL_BIN_DIR) $(INSTALL_LIB_DIR) $(INSTALL_INC_DIR) \
		$(VNCDIR)

##############################################

CONFIG_VALUES= \
	HAVE_NCURSES_CURSES_H HAVE_NCURSES_H HAVE_CURSES_H HAVE_DIRENT_H \
	HAVE_STRUCT_DIRENT_D_TYPE \
	HAVE_LSEEK64 HAVE_LSEEK HAVE_STRINGS_H HAVE_STRING_H \
	HAVE_STRUCT_STAT_ST_RDEV HAVE_STRUCT_STAT_ST_BLOCKS \
	HAVE_STRUCT_STAT_ST_BLKSIZE HAVE_STRUCT_STAT_ST_FLAGS \
	HAVE_STRUCT_STAT_ST_GEN HAVE_INET_ATON HAVE_INTTYPES_H \
	HAVE_PTHREAD_MUTEX_CONSISTENT_NP HAVE_PTHREAD_MUTEXATTR_SETPSHARED \
	HAVE_PTHREAD_MUTEXATTR_SETROBUST_NP \
	HAVE_PTHREAD_CONDATTR_SETPSHARED

CONFIG_H= $(OBJDIR)/pfkutils_config.h

define PFK_CONFIG_LINE
	if [ "x$(PFK_CONFIG_$(value))" = "x" ] ; then \
	   echo 'plz define PFK_CONFIG_$(value) in config/$(CONFIG)' ; \
	   exit 1 ; \
	elif [ "$(PFK_CONFIG_$(value))" != "0" ] ; then \
	   echo \#define $(value) $(PFK_CONFIG_$(value)) >> $(CONFIG_H).tmp ; \
	fi ; 
endef

$(CONFIG_H): Makefile config/always config/$(CONFIG)
	$(Q)echo \#define PACKAGE_NAME \"pfkutils\" > $(CONFIG_H).tmp
	$(Q)echo \#define PACKAGE_STRING \"pfkutils 3.31\" >> $(CONFIG_H).tmp
	$(Q)$(foreach value,$(CONFIG_VALUES),$(PFK_CONFIG_LINE))
	$(Q)set -e ; if [ -f $(CONFIG_H) ] ; then \
		if ! cmp -s $(CONFIG_H).tmp $(CONFIG_H) ; then \
			echo making $(CONFIG_H) ; \
			mv $(CONFIG_H).tmp $(CONFIG_H) ; \
		else \
			rm -f $(CONFIG_H).tmp ; \
		fi ; \
	else \
		echo making $(CONFIG_H) ; \
		mv $(CONFIG_H).tmp $(CONFIG_H) ; \
	fi

##############################################

OBJDIRS_TOMAKE= \
	environ main misc scripts contrib fonts

##############################################

BUILD_SWITCHES = \
	pfkbak pfksh syslog checksize treescan sudo \
	ampfk pfkscript pfktop sessionmgr spinner xrandr states bglog he \
	libpfkfb diskloader pfkstat slowlink deduplifier libwas \
	libpfkthread xlock hilite do_fft protossl i3

SUBST_VARS = \
	PFK_USER_NAME PFK_USER_ID PFK_GROUP_ID PFK_UNAME_PATH prefix \
	$(foreach sw,$(BUILD_SWITCHES),PFK_BUILD_$(sw))

PREPROC_SOURCES = \
	main/programs.h environ/kshrc environ/profile \
	main/sudo.h scripts/cs \
	scripts/emacs-lone scripts/myemacs-cscope-helper \
	scripts/myshell-launcher scripts/myshell scripts/pf_frontend \
	environ/xsession environ/emacs.el

PREPROC_TARGETS += $(foreach t,$(PREPROC_SOURCES),$(OBJDIR)/$(t))

define PREPROC_SUBST
$(OBJDIR)/$(file): $(file).in config/always config/$(CONFIG)
	@$(foreach sw,$(BUILD_SWITCHES),\
		if [ "x$(PFK_BUILD_$(sw))" = "x" ] ; then \
			echo 'plz set PFK_BUILD_$(sw) in config/$(CONFIG)' ; \
			exit 1 ; \
		fi ; ) true
	$(Q)sed $(foreach v,$(SUBST_VARS),-e 's,@$(v)@,$($(v)),') \
		< $(file).in > $(OBJDIR)/$(file).tmp
	$(Q)if ! [ -f $(OBJDIR)/$(file) ] ; then \
		echo making $(file) ; \
		mv $(OBJDIR)/$(file).tmp $(OBJDIR)/$(file) ; \
	else \
		if ! cmp -s $(OBJDIR)/$(file).tmp $(OBJDIR)/$(file) ; then \
			echo making $(file) ; \
			mv $(OBJDIR)/$(file).tmp $(OBJDIR)/$(file) ; \
		else \
			rm -f $(OBJDIR)/$(file).tmp ; \
		fi ;  \
	fi

endef

$(eval $(foreach file,$(PREPROC_SOURCES),$(PREPROC_SUBST)))

##############################################
##############################################

LIB_TARGETS += libpfkutil
libpfkutil_TARGET = $(OBJDIR)/libpfkutil.a
libpfkutil_CSRCS = \
	libpfkutil/base64.c \
	libpfkutil/inet_aton.c libpfkutil/m.c \
	libpfkutil/printbuf.c libpfkutil/regex.c
libpfkutil_CXXSRCS = \
	libpfkutil/HSM.cc \
	libpfkutil/childprocessmanager.cc libpfkutil/dll3.cc \
	libpfkutil/dll3_btree.cc libpfkutil/fdThreadLauncher.cc \
	libpfkutil/fd_mgr.cc libpfkutil/hsmthread.cc \
	libpfkutil/msgr.cc libpfkutil/prioWorkQ.cc \
	libpfkutil/shmempipe.cc \
	libpfkutil/thread_slinger.cc \
	libpfkutil/signal_backtrace.cc \
	libpfkutil/simpleUrl.cc \
	libpfkutil/asm_parser.cc
libpfkutil_INSTALL_HDRS = \
	libpfkutil/HSM.h libpfkutil/LockWait.h \
	libpfkutil/base64.h libpfkutil/bst.h libpfkutil/bufprintf.h \
	libpfkutil/childprocessmanager.h libpfkutil/circular_buffer.h \
	libpfkutil/dll3.h \
	libpfkutil/dll3_btree.h libpfkutil/fdThreadLauncher.h \
	libpfkutil/fd_mgr.h libpfkutil/hsmthread.h libpfkutil/m.h \
	libpfkutil/msgr.h libpfkutil/posix_fe.h \
	libpfkutil/prioWorkQ.h libpfkutil/regex.h \
	libpfkutil/shmempipe.h libpfkutil/thread_slinger.h \
	libpfkutil/dll3.tcc \
	libpfkutil/thread_slinger.tcc libpfkutil/HSM.tcc libpfkutil/HSM.h \
	libpfkutil/signal_backtrace.h \
	libpfkutil/simpleUrl.h \
	libpfkutil/asm_parser.h
libpfkutil_HDRS = \
	libpfkutil/BackTrace.h libpfkutil/HSM.h libpfkutil/LockWait.h \
	libpfkutil/base64.h libpfkutil/bst.h libpfkutil/bufprintf.h \
	libpfkutil/childprocessmanager.h libpfkutil/circular_buffer.h \
	libpfkutil/dll3.h \
	libpfkutil/dll3_btree.h libpfkutil/fdThreadLauncher.h \
	libpfkutil/fd_mgr.h libpfkutil/hsmthread.h libpfkutil/inet_aton.h \
	libpfkutil/lognew.h libpfkutil/m.h libpfkutil/msgr.h \
	libpfkutil/posix_fe.h libpfkutil/prioWorkQ.h \
	libpfkutil/regex.h libpfkutil/shmempipe.h \
	libpfkutil/shmempipe_test_msg.h libpfkutil/thread_slinger.h \
	libpfkutil/signal_backtrace.h \
	libpfkutil/simpleUrl.h

DOXYGEN_TARGETS += dll3 shmempipe threadslinger
dll3_DOXYFILE = libpfkutil/Doxyfile.dll3
shmempipe_DOXYFILE = libpfkutil/Doxyfile.shmempipe
threadslinger_DOXYFILE = libpfkutil/Doxyfile.threadslinger

###################

LIBPFKUTIL_TEST_TARGETS = \
	HSM_test hsmthread_test dll3_test dll3_btree_test \
	msgr-test-clnt msgr-test-msg msgr-test-svr \
	shmempipe_test_master shmempipe_test_slave testpipe \
	childprocessmanager_test signal_backtrace_test

define BUILD_LIBPFKUTIL_TEST_TARGET
PROG_TARGETS += $(t)
$(t)_TARGET = $(OBJDIR)/libpfkutil-$(t)
$(t)_CXXSRCS = libpfkutil/$(t).cc
$(t)_LIBS += -lpthread -lrt
$(t)_DEPLIBS = $(libpfkutil_TARGET)

endef

$(eval $(foreach t,$(LIBPFKUTIL_TEST_TARGETS),$(BUILD_LIBPFKUTIL_TEST_TARGET)))

##############################################

ifeq ($(PFK_BUILD_libpfkfb),1)
LIB_TARGETS += libpfkfb
libpfkfb_TARGET = $(OBJDIR)/libpfkfb.a
libpfkfb_INCS = -Ilibpfkutil -Ilibpfkdll2 $(MBEDTLS_INCS)
libpfkfb_CXXSRCS = \
	libpfkfb/BlockCache.cc libpfkfb/Btree.cc libpfkfb/BtreeNode.cc \
	libpfkfb/FileBlockLocal.cc libpfkfb/FileBlockLocalAllocFree.cc \
	libpfkfb/FileBlockLocalAuid.cc libpfkfb/FileBlockLocalAun.cc \
	libpfkfb/FileBlockLocalBucket.cc libpfkfb/FileBlockLocalCompact.cc \
	libpfkfb/FileBlockLocalDIB.cc libpfkfb/FileBlockLocalGetRel.cc \
	libpfkfb/FileBlockLocalValidate.cc libpfkfb/FileBlock_iface.cc \
	libpfkfb/PageCache.cc libpfkfb/PageIO.cc \
	libpfkfb/PageIOFileDescriptor.cc libpfkfb/PageIONetworkTCPServer.cc \
	libpfkfb/PageIODirectoryTree.cc \
	libpfkfb/documentation.cc
libpfkfb_INSTALL_HDRS = \
	libpfkfb/BlockCache.h libpfkfb/Btree.h libpfkfb/BtreeDbClasses.h \
	libpfkfb/FileBlockLocal.h libpfkfb/FileBlock_iface.h \
	libpfkfb/PageCache.h libpfkfb/PageIO.h
libpfkfb_HDRS = \
	libpfkfb/BlockCache.h libpfkfb/BlockCache_internal.h \
	libpfkfb/Btree.h libpfkfb/BtreeDbClasses.h \
	libpfkfb/Btree_internal.h libpfkfb/FileBlockLocal.h \
	libpfkfb/FileBlock_iface.h libpfkfb/PageCache.h \
	libpfkfb/PageCache_internal.h libpfkfb/PageIO.h
DOXYGEN_TARGETS += libpfkfb
libpfkfb_DOXYFILE = libpfkfb/Doxyfile

###################

PROG_TARGETS += fb_testBtree
fb_testBtree_TARGET = $(OBJDIR)/libpfkfb-testBtree
fb_testBtree_INCS = $(libpfkfb_INCS) $(MBEDTLS_INCS)
fb_testBtree_CXXSRCS = libpfkfb/testBtree.cc
fb_testBtree_DEPLIBS = \
	$(libpfkfb_TARGET) $(libpfkutil_TARGET) $(libpfkdll2_TARGET)
fb_testBtree_LIBS += -lpthread $(MBEDTLS_LIBS)

PROG_TARGETS += fb_testFileBlock
fb_testFileBlock_TARGET = $(OBJDIR)/libpfkfb-testFileBlock
fb_testFileBlock_INCS = $(libpfkfb_INCS) $(MBEDTLS_INCS)
fb_testFileBlock_CXXSRCS = libpfkfb/testFileBlock.cc
fb_testFileBlock_DEPLIBS = \
	$(libpfkfb_TARGET) $(libpfkutil_TARGET) $(libpfkdll2_TARGET)
fb_testFileBlock_LIBS += -lpthread $(MBEDTLS_LIBS)
endif

##############################################

ifeq ($(PFK_BUILD_pfkbak),1)
ifeq ($(PFK_BUILD_libpfkfb),0)
$(error PFK_BUILD_libpfkfb is required for PFK_BUILD_pfkbak)
endif
LIB_TARGETS += libpfkbak
libpfkbak_TARGET = $(OBJDIR)/libpfkbak.a
libpfkbak_INCS = -Ilibpfkutil -Ilibpfkdll2 -Ilibpfkfb $(MBEDTLS_INCS)
libpfkbak_CXXSRCS = \
	backup/bakfile.cc backup/create.cc backup/deletevers.cc \
	backup/export.cc backup/extract.cc backup/list.cc \
	backup/main.cc backup/options.cc backup/update.cc \
	backup/tarfile.cc
libpfkbak_HDRS = \
	backup/bakfile.h backup/database_items.h backup/options.h \
	backup/tarfile.h
endif

##############################################

ifeq ($(PFK_BUILD_hilite),1)
LIB_TARGETS += libhilite
libhilite_TARGET = $(OBJDIR)/libhilite.a
libhilite_CXXSRCS = hilite/color.cc hilite/config_file.cc hilite/hilite.cc
pfkutils_LIBHILITE = $(OBJDIR)/libhilite.a
endif

##############################################

LIB_TARGETS += libpfkdll2
libpfkdll2_TARGET = $(OBJDIR)/libpfkdll2.a
libpfkdll2_CXXSRCS = libpfkdll2/dll2_hash.cc 
libpfkdll2_HDRS = libpfkdll2/dll2.h libpfkdll2/dll2_btree.h
libpfkdll2_INSTALL_HDRS = libpfkdll2/dll2.h libpfkdll2/dll2_btree.h

###################

PROG_TARGETS += dll2_test_btree
dll2_test_btree_TARGET = $(OBJDIR)/libpfkdll2-test_btree
dll2_test_btree_CXXSRCS = libpfkdll2/test_btree.cc

PROG_TARGETS += dll2_test_hash
dll2_test_hash_TARGET = $(OBJDIR)/libpfkdll2-test_hash
dll2_test_hash_CXXSRCS = \
	libpfkdll2/test_hash.cc libpfkdll2/test_hash_add.cc \
	libpfkdll2/test_hash_del.cc
dll2_test_hash_HDRS = libpfkdll2/test_hash.h
dll2_test_hash_DEPLIBS = $(libpfkdll2_TARGET)

##############################################

ifeq ($(PFK_BUILD_pfksh),1)
LIB_TARGETS += libpfksh
libpfksh_TARGET = $(OBJDIR)/libpfksh.a
libpfksh_CSRCS = \
	pfksh/alloc.c pfksh/c_ksh.c pfksh/c_sh.c pfksh/c_test.c \
	pfksh/c_ulimit.c pfksh/edit.c pfksh/emacs.c pfksh/eval.c \
	pfksh/exec.c pfksh/expr.c pfksh/history.c pfksh/io.c \
	pfksh/jobs.c pfksh/lex.c pfksh/main.c pfksh/misc.c pfksh/path.c \
	pfksh/shf.c pfksh/syn.c pfksh/table.c pfksh/trap.c pfksh/tree.c \
	pfksh/tty.c pfksh/var.c pfksh/version.c
libpfksh_CXXSRCS = \
	pfksh/xtree.cc
libpfksh_HDRS = \
	pfksh/c_test.h pfksh/config.h pfksh/edit.h pfksh/emacs-gen.sh \
	pfksh/emacs_autogen.h pfksh/expand.h pfksh/lex.h pfksh/proto.h \
	pfksh/sh.h pfksh/shf.h pfksh/siglist-gen.sh pfksh/siglist_autogen.h \
	pfksh/table.h pfksh/tree.h pfksh/tty.h
libpfksh_DEFS = -DBUILD_DATE=\"pfksh-$(BUILD_DATE)\"
pfkutils_LIBNCURSES= -lncurses
POSTALL += $(OBJDIR)/pfksh.0
pfkutils_POSTINSTALL += pfksh-install-man

$(OBJDIR)/pfksh.0: pfksh/pfksh.man
	nroff -man pfksh/pfksh.man > $(OBJDIR)/pfksh.0

pfksh-install-man:
	@mkdir -p $(INSTALL_MAN_DIR)/cat1
	@mkdir -p $(INSTALL_MAN_DIR)/man1
	@echo installing $(OBJDIR)/pfksh.0
	@cp -f $(OBJDIR)/pfksh.0 $(INSTALL_MAN_DIR)/cat1
	@echo installing pfksh/pfksh.man
	@cp -f pfksh/pfksh.man $(INSTALL_MAN_DIR)/man1/pfksh.1
endif

##############################################

ifeq ($(PFK_BUILD_protossl),1)
LIB_TARGETS += libprotossl
libprotossl_TARGET = $(OBJDIR)/libprotossl.a
libprotossl_DEFS = $(MBEDTLS_FLAGS)
libprotossl_INCS = -Ilibprotossl -Ilibpfkutil $(PROTOBUF_INC) $(MBEDTLS_INCS)
libprotossl_CXXSRCS = \
	libprotossl/protosslcertparams.cc \
	libprotossl/protosslconnclient.cc \
	libprotossl/protosslconnserver.cc \
	libprotossl/protosslmsgs.cc
libprotossl_HDRS = libprotossl/libprotossl.h
libprotossl_INSTALL_HDRS = libprotossl/libprotossl.h
libprotossl_POSTINSTALL = install_protossl

install_protossl:
	@echo installing protossl
	$(Q)cp libprotossl/keys/protossl_make_keys.sh $(HOME)/pfk/bin/
	$(Q)chmod 755 $(HOME)/pfk/bin/protossl_make_keys.sh

PROG_TARGETS += protossl_test
protossl_test_TARGET = $(OBJDIR)/protossl_test
protossl_test_DEFS = $(MBEDTLS_FLAGS) \
-DTEST_PROTO_HDR=\"$(protossl_test_libprotossl/test_proto.proto_HDR)\"
protossl_test_INCS = -Ilibprotossl -Ilibpfkutil \
	$(PROTOBUF_INC) $(MBEDTLS_INCS)
protossl_test_PROTOSRCS = libprotossl/test_proto.proto
protossl_test_CXXSRCS = libprotossl/test.cc
protossl_test_DEPLIBS = $(libprotossl_TARGET) $(libpfkutil_TARGET)
protossl_test_LIBS = $(PROTOBUF_LIB) $(MBEDTLS_LIBS) -lpthread
endif

##############################################

LIB_TARGETS += libi2
libi2_TARGET = $(OBJDIR)/libi2.a
libi2_INCS = -Ilibpfkutil
libi2_CXXSRCS = \
	i2/i2_options.cc i2/i2_main.cc \
	i2/i2f_options.cc i2/i2f_main.cc
libi2_HDRS = i2/i2_options.h i2/i2f_options.h

##############################################

ifeq ($(PFK_BUILD_i3),1)
ifeq ($(PFK_BUILD_libprotossl),0)
$(error PFK_BUILD_libprotossl is required for PFK_BUILD_i3)
endif
LIB_TARGETS += libi3
libi3_TARGET = $(OBJDIR)/libi3.a
libi3_DEFS = -DI3_PROTO_HDR=\"$(libi3_i3/i3.proto_HDR)\"
libi3_INCS = -Ilibprotossl -Ilibpfkutil $(MBEDTLS_INCS) $(PROTOBUF_INC)
libi3_CXXSRCS = i3/i3_options.cc i3/i3_main.cc
libi3_PROTOSRCS = i3/i3.proto
pfkutils_LIBPROTOBUF = $(PROTOBUF_LIB)
pfkutils_LIBPROTOSSL = $(libprotossl_TARGET)
endif

##############################################

ifeq ($(PFK_BUILD_ampfk),1)
LIB_TARGETS += libampfk
libampfk_TARGET = $(OBJDIR)/libampfk.a
libampfk_INCS = -Ilibpfkdll2 -I$(OBJDIR)/ampfk -Iampfk
libampfk_LLSRCS = ampfk/tokenizer.ll
libampfk_YYSRCS = ampfk/parser.yy
libampfk_CXXSRCS = \
	ampfk/automake_findtargets.cc ampfk/automake_ostream.cc \
	ampfk/automake_output.cc ampfk/automake_parser.cc \
	ampfk/automake_rules.cc ampfk/automake_utilities.cc \
	ampfk/automake_variables.cc ampfk/condition.cc ampfk/main.cc
libampfk_HDRS = \
	ampfk/automake_parser.h ampfk/condition.h ampfk/tokenizer.h
libampfk_DEFS = \
	-Dyyparse=ampfk_yyparse -Dyylex=ampfk_yylex \
	-Dyyerror=ampfk_yyerror -Dyyin=ampfk_yyin \
	-Dyyout=ampfk_yyout -Dyylineno=ampfk_yylineno \
	-Dyy_flex_debug=ampfk_yy_flex_debug
endif

##############################################

ifeq ($(PFK_BUILD_syslog),1)
LIB_TARGETS += syslog
syslog_TARGET = $(OBJDIR)/libsyslog.a
syslog_CSRCS = \
	syslog/config_file.c syslog/process_line.c syslog/strip_chars.c \
	syslog/syslog-postprocess.c syslog/syslogd.c
syslog_HDRS = \
	syslog/config_file.h syslog/process_line.h syslog/rules.h \
	syslog/strip_chars.h
endif

##############################################

ifeq ($(PFK_BUILD_pfkscript),1)
LIB_TARGETS += pfkscript
pfkscript_TARGET = $(OBJDIR)/libpfkscript.a
pfkscript_INCS = -Ilibpfkutil
pfkscript_CXXSRCS = pfkscript/logfile.cc pfkscript/main.cc pfkscript/options.cc
pfkscript_HDRS = pfkscript/logfile.h pfkscript/options.h
pfkutils_LIBUTILS = -lutil

LIB_TARGETS += libpfkscriptutil
libpfkscriptutil_TARGET = $(OBJDIR)/libpfkscriptutil.a
libpfkscriptutil_INCS = -Ilibpfkutil
libpfkscriptutil_CXXSRCS = pfkscript/libpfkscriptutil.cc
libpfkscriptutil_HDRS = pfkscript/libpfkscriptutil.h
libpfkscriptutil_INSTALL_HDRS = pfkscript/libpfkscriptutil.h

endif

##############################################

ifeq ($(PFK_BUILD_spinner),1)
LIB_TARGETS += spinner
spinner_TARGET = $(OBJDIR)/libspinner.a
spinner_INCS = -Ilibpfkutil
spinner_CXXSRCS = main/spinner.cc
endif

##############################################

ifeq ($(PFK_BUILD_pfktop),1)
LIB_TARGETS += pfktop
pfktop_TARGET = $(OBJDIR)/libpfktop.a
pfktop_INCS = -Ilibpfkutil
pfktop_CXXSRCS = pfktop/pfktop.cc pfktop/pfkrenice.cc \
	pfktop/pidlist.cc pfktop/options.cc pfktop/screen.cc \
	pfktop/fileparser.cc pfktop/tiddb.cc pfktop/tidentry.cc
pfktop_HDRS = pfktop/options.h pfktop/pidlist.h pfktop/screen.h
endif

##############################################

ifeq ($(PFK_BUILD_diskloader),1)
LIB_TARGETS += diskloader
diskloader_TARGET = $(OBJDIR)/libdiskloader.a
diskloader_CXXSRCS = \
	diskloader/file_obj.cc diskloader/main.cc diskloader/pseudo_random.cc
diskloader_HDRS = \
	diskloader/file_obj.h diskloader/pseudo_random.h
endif

##############################################

ifeq ($(PFK_BUILD_bglog),1)
LIB_TARGETS += bglog
bglog_TARGET = $(OBJDIR)/libbglog.a
bglog_CSRCS = bglog/log.c bglog/main.c
bglog_HDRS = bglog/config.h bglog/log.h
pfkutils_LIBUTILS = -lutil
endif

##############################################

ifeq ($(PFK_BUILD_libwas),1)
LIB_TARGETS += libWebAppServer
libWebAppServer_TARGET = $(OBJDIR)/libWebAppServer.a
libWebAppServer_INCS = -Ilibpfkutil $(MBEDTLS_INCS) $(PROTOBUF_INC)
libWebAppServer_CXXSRCS = \
	libWebAppServer/WebAppConnection.cc \
	libWebAppServer/WebAppServer.cc \
	libWebAppServer/WebAppServerConfig.cc \
	libWebAppServer/WebFastCGIConnection.cc \
	libWebAppServer/WebServerConnectionBase.cc \
	libWebAppServer/WebSocketClient.cc \
	libWebAppServer/WebSocketConnection.cc \
	libWebAppServer/serverPorts.cc \
	libWebAppServer/simpleWebSocket.cc \
	libWebAppServer/simpleWebSocketClientConn.cc \
	libWebAppServer/simpleWebSocketServerConn.cc
libWebAppServer_INSTALL_HDRS = \
	libWebAppServer/CircularReader.h libWebAppServer/FastCGI.h \
	libWebAppServer/WebAppMessage.h libWebAppServer/WebAppServer.h \
	libWebAppServer/WebAppServerInternal.h \
	libWebAppServer/WebSocketClient.h libWebAppServer/serverPorts.h \
	libWebAppServer/simpleWebSocket.h
libWebAppServer_HDRS = \
	libWebAppServer/CircularReader.h libWebAppServer/FastCGI.h \
	libWebAppServer/WebAppMessage.h libWebAppServer/WebAppServer.h \
	libWebAppServer/WebAppServerInternal.h \
	libWebAppServer/WebSocketClient.h libWebAppServer/serverPorts.h \
	libWebAppServer/simpleWebSocket.h

DOXYGEN_TARGETS += libwas
libwas_DOXYFILE = libWebAppServer/Doxyfile

###################

LIBWAS_TEST_TARGETS= \
	testUrlRegex CircularReaderTest wsClientTest wsServerTest

define BUILD_LIBWAS_TEST_TARGET
PROG_TARGETS += libwas_$(t)
libwas_$(t)_TARGET = $(OBJDIR)/libWebAppServer-$(t)
libwas_$(t)_INCS = $(libWebAppServer_INCS) $(MBEDTLS_INCS)
libwas_$(t)_CXXSRCS = libWebAppServer/$(t).cc
libwas_$(t)_LIBS += -lpthread $(MBEDTLS_LIBS)
libwas_$(t)_DEPLIBS = $(libWebAppServer_TARGET) $(libpfkutil_TARGET)

endef

$(eval $(foreach t,$(LIBWAS_TEST_TARGETS),$(BUILD_LIBWAS_TEST_TARGET)))

PROG_TARGETS += simpleWsTestClient simpleWsTestServer

simpleWsTestClient_TARGET = $(OBJDIR)/simpleWsTestClient
simpleWsTestClient_INCS = $(PROTOBUF_INC)
simpleWsTestClient_CXXSRCS = libWebAppServer/simpleWsTestClient.cc
simpleWsTestClient_PROTOSRCS = libWebAppServer/proxyTcpServer/proxyMsgs.proto
simpleWsTestClient_DEFS = -DPROXYMSGS_PB_H=\"$(simpleWsTestClient_libWebAppServer/proxyTcpServer/proxyMsgs.proto_HDR)\"
simpleWsTestClient_LIBS = \
	$(libWebAppServer_TARGET) $(libpfkutil_TARGET) \
	$(PROTOBUF_LIB) $(MBEDTLS_LIBS) -lpthread

simpleWsTestServer_TARGET = $(OBJDIR)/simpleWsTestServer
simpleWsTestServer_INCS = $(PROTOBUF_INC)
simpleWsTestServer_CXXSRCS = libWebAppServer/simpleWsTestServer.cc
simpleWsTestServer_PROTOSRCS = libWebAppServer/proxyTcpServer/proxyMsgs.proto
simpleWsTestServer_DEFS = -DPROXYMSGS_PB_H=\"$(simpleWsTestClient_libWebAppServer/proxyTcpServer/proxyMsgs.proto_HDR)\"
simpleWsTestServer_LIBS = \
	$(libWebAppServer_TARGET) $(libpfkutil_TARGET) \
	$(PROTOBUF_LIB) $(MBEDTLS_LIBS) -lpthread

endif

##############################################

ifeq ($(PFK_BUILD_wsproxy),1)
ifeq ($(PFK_BUILD_libwas),0)
$(error PFK_BUILD_libwas is required for PFK_BUILD_wsproxy)
endif
LIB_TARGETS += wsProxyProtos

wsProxyProtos_TARGET = $(OBJDIR)/libwsProxyProtos.a
wsProxyProtos_PROTOSRCS = \
	libWebAppServer/proxyTcpServer/proxyMsgs.proto

PROG_TARGETS += wsProxyClient wsProxyServer

wsProxyClient_TARGET = $(OBJDIR)/wsProxyClient
wsProxyClient_INCS = \
	-IlibWebAppServer -Ilibpfkutil \
	-I$(OBJDIR)/libWebAppServer/proxyTcpServer \
	$(PROTOBUF_INC) $(MBEDTLS_INCS)
wsProxyClient_CXXSRCS = \
	libWebAppServer/proxyTcpServer/proxyClientConn.cc \
	libWebAppServer/proxyTcpServer/proxyClientTcpAcceptor.cc \
	libWebAppServer/proxyTcpServer/proxyClientMain.cc
wsProxyClient_HDRS = \
	libWebAppServer/proxyTcpServer/proxyClientConn.h \
	libWebAppServer/proxyTcpServer/proxyClientTcpAcceptor.h
wsProxyClient_LIBS = $(PROTOBUF_LIB) $(MBEDTLS_LIBS) -lpthread
wsProxyClient_DEPLIBS = $(libWebAppServer_TARGET) $(libpfkutil_TARGET) $(wsProxyProtos_TARGET)
wsProxyClient_INSTALL = 1

wsProxyServer_TARGET = $(OBJDIR)/wsProxyServer
wsProxyServer_INCS = \
	-IlibWebAppServer -Ilibpfkutil \
	$(PROTOBUF_INC) $(MBEDTLS_INCS)
wsProxyServer_CXXSRCS = \
	libWebAppServer/proxyTcpServer/proxyServerConn.cc \
	libWebAppServer/proxyTcpServer/proxyServerMain.cc
wsProxyServer_HDRS = \
	libWebAppServer/proxyTcpServer/proxyServerConn.h
wsProxyServer_LIBS = $(PROTOBUF_LIB) $(MBEDTLS_LIBS) -lpthread
wsProxyServer_DEPLIBS = $(libWebAppServer_TARGET) $(libpfkutil_TARGET) $(wsProxyProtos_TARGET)
wsProxyServer_INSTALL = 1
endif

##############################################

ifeq ($(PFK_BUILD_libpfkthread),1)
LIB_TARGETS += libpfkthread
libpfkthread_TARGET = $(OBJDIR)/libpfkthread.a
libpfkthread_INCS = \
	-Ilibpfkthread -Ilibpfkthread/int -Ilibpfkdll2 -Ilibpfkutil
libpfkthread_CXXSRCS = \
	libpfkthread/pk_filedescs.cc libpfkthread/pk_filedescs_thread.cc \
	libpfkthread/pk_messages.cc libpfkthread/pk_messages_ext.cc \
	libpfkthread/pk_messages_ext_link_tcp.cc \
	libpfkthread/pk_semaphores.cc libpfkthread/pk_threads.cc \
	libpfkthread/pk_timers.cc libpfkthread/stringhash.cc
libpfkthread_INSTALL_HDRS = \
	libpfkthread/pk_semaphores.h \
	libpfkthread/pk_messages.h \
	libpfkthread/pk_filedescs.h \
	libpfkthread/pk_messages_ext.h \
	libpfkthread/pk_timers.h \
	libpfkthread/pk_threads.h \
	libpfkthread/stringhash.h
libpfkthread_HDRS = \
	libpfkthread/pk_semaphores.h \
	libpfkthread/pk_messages.h \
	libpfkthread/pk_filedescs.h \
	libpfkthread/pk_messages_ext.h \
	libpfkthread/pk_timers.h \
	libpfkthread/pk_threads.h \
	libpfkthread/stringhash.h \
	libpfkthread/int/pk_filedescs_internal.h \
	libpfkthread/int/pk_messages_internal.h \
	libpfkthread/int/pk_threads_internal.h \
	libpfkthread/int/pk_timers_internal.h

###################

LIBPFKTHR_TEST_TARGETS = \
	test-1 test-2 test-3 test-4

define BUILD_LIBPFKTHR_TEST_TARGET
PROG_TARGETS += pfkthr_$(t)
pfkthr_$(t)_TARGET = $(OBJDIR)/libpfkthread-$(t)
pfkthr_$(t)_INCS = $(libpfkthread_INCS)
pfkthr_$(t)_CXXSRCS = libpfkthread/$(t).cc
pfkthr_$(t)_LIBS += -lpthread
pfkthr_$(t)_DEPLIBS = $(libpfkthread_TARGET) $(libpfkdll2_TARGET)

endef

$(eval $(foreach t,$(LIBPFKTHR_TEST_TARGETS),$(BUILD_LIBPFKTHR_TEST_TARGET)))

endif

##############################################

ifeq ($(PFK_BUILD_xlock),1)
PROG_TARGETS += xlock

xlock_TARGET = $(OBJDIR)/xlock.bin
xlock_CSRCS = xlock/flame.c xlock/hsbramp.c xlock/pyro.c xlock/resource.c xlock/rotor.c xlock/swarm.c xlock/usleep.c xlock/worm.c xlock/xlock.c
xlock_HDRS = xlock/xlock.h
xlock_INCS= -Ixlock
xlock_LIBS= -lX11 -lm
xlock_INSTALL = 1
xlock_POSTINSTALL = xlock-postinstall

xlock-postinstall:
	@echo renaming xlock.bin to xlock
	$(Q)mv $(INSTALL_BIN_DIR)/xlock.bin $(INSTALL_BIN_DIR)/xlock

endif

##############################################

ifeq ($(PFK_BUILD_fonts),1)

FONTDIR= $(HOME)/pfk/fonts
ALIAS= fonts/fonts.alias

BDF_FILES= \
	fonts/5x7.bdf \
	fonts/6x13.bdf fonts/6x13bold.bdf \
	fonts/10x20.bdf fonts/10x20bold.bdf
PCFGZ_FILES= $(patsubst %.bdf, $(OBJDIR)/%.pcf.gz, $(BDF_FILES))

POSTALL += build_fonts

build_fonts: $(PCFGZ_FILES)

$(PCFGZ_FILES) : $(OBJDIR)/%.pcf.gz: %.bdf
	bdftopcf -t < $< | gzip > $@

POSTINSTALL += install_fonts

install_fonts:
	@echo installing fonts
	$(Q)mkdir -p $(FONTDIR)
	$(Q)cp $(PCFGZ_FILES) $(ALIAS) $(FONTDIR)
	$(Q)cd $(FONTDIR) && mkfontdir .
	$(Q)[ x$(DISPLAY) != x ] && xset +fp $(FONTDIR) || true
	$(Q)tar -C $(HOME) -jxf fonts/dot-fonts.tar.bz2

endif

##############################################

ifeq ($(PFK_BUILD_states),1)
LIB_TARGETS += states
states_TARGET = $(OBJDIR)/libstates.a
states_INCS = -Imisc/states
states_CSRCS = \
	misc/states/machine.c misc/states/main.c \
	misc/states/parse_actions.c
states_CXXSRCS =
states_HDRS = \
	misc/states/machine.h misc/states/parse_actions.h \
	misc/states/wordentry.h
states_YSRCS = \
	misc/states/parser.y
states_LSRCS = \
	misc/states/tokenizer.l
states_DEFS = \
	-Dyyparse=states_yyparse -Dyylex=states_yylex \
	-Dyyerror=states_yyerror -Dyyin=states_yyin \
	-Dyyout=states_yyout -Dyylineno=states_yylineno \
	-Dyy_flex_debug=states_yy_flex_debug
states_EXTRAOBJS = \
	$(OBJDIR)/states-misc_states_template_classH.o \
	$(OBJDIR)/states-misc_states_template_classC.o \
	$(OBJDIR)/states-misc_states_template_header.o \
	$(OBJDIR)/states-misc_states_template_code.o \
	$(OBJDIR)/states-misc_states_template_skel.o

$(OBJDIR)/states-misc_states_tmpl_to_c: misc/states/tmpl_to_c.c
	@echo making tmpl_to_c
	$(Q)$(CC) $< -o $@

# call STATES_TEMPL_SOURCE, c file, varname, template file
define STATES_TEMPL_SOURCE

$(OBJDIR)/states-misc_states_$(1:%.c=%.o): $(OBJDIR)/states-misc_states_$(1)
	@echo compiling misc/states/$(1)
	$(Q)$(CC) -c $$< -o $$@

$(OBJDIR)/states-misc_states_$(1): $(OBJDIR)/states-misc_states_tmpl_to_c misc/states/$(3)
	@echo making misc/states/$(3)
	$(Q)$(OBJDIR)/states-misc_states_tmpl_to_c misc/states/$(3) $(2) > $(OBJDIR)/states-misc_states_$(1)

endef

$(eval $(call STATES_TEMPL_SOURCE \
,template_classH.c,baseclassH,pk_state_machine_base.h))
$(eval $(call STATES_TEMPL_SOURCE \
,template_classC.c,baseclassC,pk_state_machine_base.cc))
$(eval $(call STATES_TEMPL_SOURCE \
,template_header.c,template_header,template.header))
$(eval $(call STATES_TEMPL_SOURCE \
,template_code.c,template_code,template.code))
$(eval $(call STATES_TEMPL_SOURCE \
,template_skel.c,template_skel,template.skel))

endif

##############################################

PFKUTILS_BRANCH = $(shell git rev-parse --abbrev-ref HEAD)
PFKUTILS_COMMIT = $(shell git rev-parse HEAD)

PROG_TARGETS += pfkutils
pfkutils_TARGET = $(OBJDIR)/pfkutils
pfkutils_INCS = -Ilibpfkutil -I$(OBJDIR)/main \
	-Ilibpfkfb -Ilibpfkdll2 $(MBEDTLS_INCS)
pfkutils_CSRCS = \
	main/crnl.c main/random-hex.c main/fmtsdiff.c \
	main/genpw.c main/xtermbar.c main/waitpid.c 
ifeq ($(PFK_BUILD_slowlink),1)
pfkutils_CXXSRCS += main/slowlink.cc
endif
ifeq ($(PFK_BUILD_pfkstat),1)
pfkutils_CSRCS += main/pfkstat.c
endif
ifeq ($(PFK_BUILD_he),1)
pfkutils_CSRCS += main/he.c
pfkutils_LIBNCURSES= -lncurses
endif
ifeq ($(PFK_BUILD_sudo),1)
pfkutils_CSRCS += main/sudo.c
endif
ifeq ($(PFK_BUILD_treescan),1)
pfkutils_CXXSRCS += main/treescan.cc
endif
ifeq ($(PFK_BUILD_checksize),1)
pfkutils_CSRCS += main/checksize.c
endif
ifeq ($(PFK_BUILD_deduplifier),1)
pfkutils_CXXSRCS += main/deduplifier.cc
endif
pfkutils_CXXSRCS += \
	main/rmstar_new.cc main/main.cc
ifeq ($(PFK_BUILD_libpfkfb),1)
pfkutils_CXXSRCS += main/fbcompact.cc main/fbdump.cc main/btdump.cc
endif
ifeq ($(PFK_BUILD_sessionmgr),1)
pfkutils_CXXSRCS += main/sessionManager.cc 
endif
ifeq ($(PFK_BUILD_xrandr),1)
pfkutils_CXXSRCS += main/sessionXrandr.cc 
pfkutils_LIBXRANDR= -lXrandr
pfkutils_LIBX11= -lX11
endif
ifeq ($(PFK_BUILD_do_fft),1)
PROG_TARGETS += do_fft
do_fft_TARGET = $(OBJDIR)/do_fft
do_fft_CXXSRCS = main/do_fft.cc
do_fft_LIBS = -lfftw3
do_fft_INSTALL = 1
endif
pfkutils_HDRS = \
	$(OBJDIR)/main/programs.h
pfkutils_LIBS += \
	$(pfkutils_LIBNCURSES) $(pfkutils_LIBZ) \
	$(pfkutils_LIBXRANDR) $(pfkutils_LIBX11) \
	$(pfkutils_LIBHILITE) $(pfkutils_LIBUTILS) $(pfkutils_LIBFFTW) \
	$(pfkutils_LIBPROTOBUF) $(MBEDTLS_LIBS) -lpthread
pfkutils_DEPLIBS = \
	$(libpfksh_TARGET) $(libpfkbak_TARGET) $(libpfkfb_TARGET) \
	$(pfkscript_TARGET) $(libpfkscriptutil_TARGET) \
	$(pfktop_TARGET) $(libi2_TARGET) \
	$(libampfk_TARGET) $(syslog_TARGET) \
	$(diskloader_TARGET) $(libWebAppServer_TARGET) $(bglog_TARGET) \
	$(libpfkthread_TARGET) $(states_TARGET) $(libpfkdll2_TARGET) \
	$(libxlock_TARGET) $(spinner_TARGET) $(libi3_TARGET) \
	$(pfkutils_LIBPROTOSSL) $(libpfkutil_TARGET)
pfkutils_DEFS = \
	-DPFKUTILS_BRANCH=\"$(PFKUTILS_BRANCH)\" \
	-DPFKUTILS_COMMIT=\"$(PFKUTILS_COMMIT)\" \
	-DBUILD_DATE=\"pfkutils-$(BUILD_DATE)\" \
	-DGIT_SRC_URL=\"$(GIT_SRC_URL)\"
pfkutils_INSTALL = 1
pfkutils_POSTINSTALL += pfkutils-post-install

pfkutils-post-install:
	@echo setting up pfkutils symlinks
	$(Q)cd $(INSTALL_BIN_DIR) && ./pfkutils -dellinks
ifeq ($(PFK_BUILD_sudo),1)
	$(Q)cd $(INSTALL_BIN_DIR) && \
		if [ -f pfkutils.old ] ; then \
			ln -s pfkutils.old sudo ; \
			./sudo chown root pfkutils ; \
			./sudo chmod 4755 pfkutils ; \
		fi ; true
	@echo ""
	@echo "*** also, if not already done, perform the following as root:"
	@echo "     chown root $(INSTALL_BIN_DIR)/pfkutils"
	@echo "     chmod 4755 $(INSTALL_BIN_DIR)/pfkutils"
	@echo ""
endif
	$(Q)cd $(INSTALL_BIN_DIR) && ./pfkutils -makelinks
	$(Q)cp Makefile.inc $(prefix)

POSTINSTALL += environ_install scripts_install

ifeq ($(PFK_CONFIG_DISABLE_MAKELINKS),)
# note cygwin doesn't support this, so it is disabled on cygwin.
POSTALL += pfkutils-makelinks

pfkutils-makelinks: $(pfkutils_TARGET)
	@echo making pfkutils program links in $(OBJDIR)/bin
	$(Q)cd $(OBJDIR) && rm -rf bin && mkdir bin && cd bin && \
		ln -s ../pfkutils && ./pfkutils -makelinks
endif

##############################################

POSTALL += # TODO doxygen

environ_install:
	@echo installing environ
	$(Q)cd environ && cp $(DOT_FILES) $(KSHRC_LOCAL) $(ETCDIR)
	$(Q)cd environ && cp $(ELISP_FILES) $(EMACSDIR)
	$(Q)cd $(OBJDIR)/environ && cp $(PREPROC_ELISP_FILES) $(EMACSDIR)
	$(Q)cd $(OBJDIR)/environ && cp $(PREPROC_DOT_FILES) $(ETCDIR)
	$(Q)set -e ; cd $(HOME) ; $(foreach f,\
		$(DOT_FILES) $(PREPROC_DOT_FILES), \
		rm -f .$f ; ln -s $(ETCDIR)/$f .$f ;) true
	$(Q)set -e ; cd $(HOME) ; rm -rf .kshrc.local .emacs .elisp ; \
		ln -s $(ETCDIR)/$(KSHRC_LOCAL) .kshrc.local ; \
		ln -s $(EMACSDIR) .elisp ; \
		ln -s .elisp/emacs.el .emacs
	$(Q)set -e ; cd $(HOME)/.vnc ; rm -f xstartup ; \
		ln -s $(ETCDIR)/vnc-xstartup xstartup ; \
		chmod u+x $(ETCDIR)/vnc-xstartup \
			$(ETCDIR)/xinitrc $(ETCDIR)/xsession
	$(Q)set -e ; tar -C environ -cf - fluxbox | tar -C $(ETCDIR) -xf -
	$(Q)cd $(HOME) ; rm -rf .fluxbox ; ln -s $(ETCDIR)/fluxbox .fluxbox
	@cd $(ETCDIR) && \
		tar cf ~/etc-backup.tar . && \
		rm -rf $(ETCBAKDIR) && \
		mkdir -p $(ETCBAKDIR) && \
		cd $(ETCBAKDIR) && \
		tar xf ~/etc-backup.tar && \
		rm -f ~/etc-backup.tar

scripts_install:
	@echo installing scripts
	$(Q)cd scripts && cp $(SCRIPT_FILES) $(SCRIPTS_DIR)
	$(Q)cd $(OBJDIR)/scripts && cp $(PREPROC_SCRIPT_FILES) $(SCRIPTS_DIR)
	$(Q)cd $(SCRIPTS_DIR) && chmod a+x $(SCRIPT_FILES) \
		$(PREPROC_SCRIPT_FILES)
	$(Q)cd $(INSTALL_BIN_DIR) && binaries=`echo *` && \
		cd $(SCRIPTS_DIR) && \
		for f in $$binaries ; do \
			rm -f $$f ; \
			ln -s pf_frontend $$f ; \
		done

## the contribs target is run separately, after the pfkutils-install,
## because contribs target depends on certain things already installed.
## it would be nice to not depend on that but unfortunately it does,
## at least for now.

contribs:
	$(Q)+make -C contrib \
		PROGS="$(CONTRIB_PROGS)" \
		OBJDIR=$(PWD)/$(OBJDIR)/contrib

contribs-install:
	$(Q)+make -C contrib \
		PROGS="$(CONTRIB_PROGS)" \
		OBJDIR=$(PWD)/$(OBJDIR)/contrib \
		INSTALL_BIN_DIR="$(INSTALL_BIN_DIR)" \
		install

diffdotfiles:
	@cd $(prefix) && diff -r etc-backup etc

# TODO cscope and ctwm should use custom makefiles

# test cases :
# - touch a .c file and see if it depends and makes
# - touch a .h file and see if c files make
# - touch a .ll file and see if it makes cc, depends, and makes
# - touch a .yy file and see if it makes cc, depends, and makes
# - touch a .in file and see if preprocs
# - touch a .h.in file and see if preprocs and makes
# - touch a .c.in file and see if preprocs, depends, and makes
# - go thru config/blade enabling opt at a time and see if it builds
