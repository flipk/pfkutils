
this is a tool for archiving a set of files or a directory tree into
an archive file, much like 'tar' does.  the difference is that this
tool can selectively replace/update individual files in the archive in
a space- and time-efficient manner.  in a 'tar' file, if you want to
update one file in the archive, you must re-create the entire
archive.  even 'zip' files have this problem.

another problem is during extraction, if you want only one file or a
directory of files extracted, you must wait while the entire archive
is read linearly from start to finish.  with this tool, you can
extract a single file or directory instantly because it can seek
directly to the part of the archive which stores that file.

future versions may include compression, for example using libz to
block-compress each file.

modes of operation:

	create an 'mtar' file:
		mytar c file.mtar directory

	freshen/update an 'mtar' file:
		mytar u file.mtar directory

	list contents of 'mtar' file:
		mytar t file.mtar

	extract contents:
		mytar x file.mtar 
		mytar x file.mtar filename
		mytar x file.mtar directory

internally, the 'mtar' file is actually a pkbt btree database.  there
are the following types of records stored in this file:

	- filename:  this is just an ascii string of the relative-path
		of the filename.  leading '/' is not allowed, and no 
		component is allowed to be "..".
	    key  : "n" plus ascii filename, no NULL
	    data : uniq file id number.
	- file information:  this is a structure containing relevant
		information about the file.  the file id number is a
		32-bit number which is unique and randomly generated.
	    key  : "i" plus file id number
	    data : structure:
			last-modified time
			file size (64-bit number)
			owner id, group id
			file mode in 0777 format (rwxrwxrwx)
	- file content info:  this is a small record describing a
		block of file data. each block has a sequence number
		identifying it within the block stream.  each block
		has an md5sum so that if this block has not changed,
		it need not be rewritten.
	    key  : "d" plus file id number plus block number
	    data : md5sum
	- file contents:  this is a block of file data.  a series of
		these are strung together to hold the contents of a
		file.
	    key  : "D" plus file id number plus block number
	    data : N bytes of the file data where "N" is no longer
			than the largest block supported by the btree
			library. 


algorithms:

  process_dir:
     foreach entry in dir
        if entry is type dir,
           process_dir  entry
        else
           db_ent = file_db.get_by_fname
           if found
              stat the file
              compare stat.mtime to db_ent.mtime
              if not match
                  add file to list of files to update
              update db_ent.mark
           else
              add file to list of files to add
              update db_ent.mark

  process_dir "."
  foreach entry in btree_database
     if entry.type == "i"
        if mark != current_mark
            delete entry from file_db
  foreach entry in list of files to add
     construct new db_ent
     foreach block in the file
     
  foreach entry in list of files to update
     update_file

