#
# comments obviously begin with '#'
#
# :0 [flags] [ : [locallockfile] ]
# zero or more conditions (one per line)
# exactly one action line
#
# conditions start with leading '*', rest of line passed to egrep.
# conditions are and-ed.
# flags can be 
#     H   - egrep the header ( default )
#     B   - egrep the body
#     D   - distinguish between upper and lower case (not the default)
#     A   - do not execute unless previous recipe without [Aa] matched
#     a   - like 'A', but prev recipe must be successfully completed.
#     E   - only execute this if the prev recipe did NOT execute
#     e   - execute only if prev recipe FAILED (action attempted but failed)
#     h   - feed header to pipe, file, or mail destination (default)
#     b   - feed body etc (default)
#     f   - consider pipe as filter
#     c   - generate carbon copy of mail
#     w   - wait for filter to finish and check exitcode.
#     W   - like 'w' but surpress warning messages.
#     i   - ignore write errors on pipe
#     r   - raw mode, do not add extra blank line at end of msg
#     
# special conditions in regex:
#     !   - invert condition
#     $   - eval rest of condition as 'sh' eval, reparse after done
#     ?   - use exitcode of specified program
#     <   - check if total length is less than specified bytecount
#     >   - duh
#
# action line starts with:
#    !    - forward to listed addresses
#    |    - start specified program
#    {    - start a nesting block
#
#    anything else in action line is a mailbox file.
#    if it is a directory, procmail creates a uniquely-named file
#        with $MSGPREFIX as prefix of file name.
#    if string ends in "/." it treats it as MH and finds the next number.
#    if string ends in "/", it does something I don't understand.
#
PATH		= /home/knaack/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/gnu/bin:/usr/local/bin

VERBOSE		= off
ORGMAIL		= /var/mail/knaack
MAILDIR		= .imap
MAILPATH	= ${HOME}/${MAILDIR}
SPOOLDIR	= ${MAILPATH}/mailboxes
DATE		= /bin/date

LOGFILE		= /home/knaack/.logs/procmail
LOGABSTRACT	= no

RECEIVED_DIR    = ${MAILPATH}/RECEIVED


# store msg ids into a cache file -- if a message arrives
# whose msgid has been seen already, store it in the 'duplicates'
# folder.

:0 Whc: msgid.lock
| formail -D 8192 msgid.cache

:0 a:
duplicates

# capture freebsd and ctm-mails before they get logged. these really
# don't have to be logged -- if they're missed there's an
# ftp site to fetch them as well.
# the "delivered-to" rule is to catch mail thru freebsd.org
# that doesn't show up in the To or Cc list (spammers often
# mask the To line).

:0:
* (^TOFreeBSD.ORG|^Delivered-To:.*freebsd.org|^FROMowner-freebsd-announce)
{
	:0:
	* ^TOcvs-cur
	ctm/FreeBSD

	:0:
	* ^TOannounce
	freebsd/announce

	:0:
	* ^TOfreebsd-ppc
	freebsd/ppc

	:0:
	* ^TOcurrent
	freebsd/current

	:0:
	* ^TOsmp@FreeBSD
	freebsd/smp

	:0:
	freebsd/unsorted
}

:0:
* ^From:.*OpenBSD-cvs@openbsd.org
ctm/OpenBSD

:0 W: pager.lock
* ^From:[ \t]*[0-9]+@skytel.com
| /home/knaack/bin/pager_handler

# save the last 40 messages, one per file, in the 'backups' directory.

:0 c
backups

:0 ic
| cd backups && /bin/rm -f dummy `ls -1t msg.* | sed -e 1,40d`

# save every incoming message in a folder by month.

:0 c:
${RECEIVED_DIR}/`$DATE +%Y-%m`

# these have to be before the ^TO-me filters.

:0
* ^Subject: Meeting (scheduled|change|deleted)
{
	:0:
	* ^From:.*knaack
	0/synchronize

	:0 c:
	0/synchronize

	:0 Ai: synchronize_msg.lock
	| /home/knaack/bin/synchronize_msg
}

:0:
* ^From:.*frmbin
0/cct

:0:
* ^To:.*lynuxexpress@LynuxWorks.COM
0/allmail

:0:
* ^To:.*systemsoft-customers
0/allmail

:0:
* ^(To:|C[cC]:).*(SPM-Customers|SPM-Managers|UNIX-Group)
0/allmail

:0:
* ^To:.*Global_Servicedesk-list
0/allmail

:0:
* ^To:.*preps_users@ecid
0/allmail

:0:
* ^Subject:.*CCT-Immed
0/cct

:0 HB:
* ^Subject:.*Labmail:
0/lab

:0 HB:
* sent to you through allmail
{
	:0 HBc:
	* Augsburger, Leonard
	${ORGMAIL}

	:0 Ah:
	headers

	:0 c:
	* ^From:.*(Augsburg|Hoehne)
	${ORGMAIL}

	:0 Ah:
	headers

	:0 E:
	0/allmail
}

:0:
* ^From:.*mcquinn
* ^Subject:.*labsched
0/lab

:0:
* ^Subject:.*Auto Reminder: Time Entry
0/timeentry

:0:
* ^Subject:.*Project Accounting Data Needed
0/timeentry

:0:
* ^Subject:.*Timesheet Reminder
0/allmail

:0:
* ^From:.*Desktop News-DTOPNEWS
0/allmail

# for some reason release-list messages match the FROM_DAEMON rule
# below.  i don't know why..

:0:
* ^TOrelease-list
0/cct

# this must be above bc555-list, as these go to bc555-list.

:0
* ^Subject:.*(New PRs|New Process Improvement PRs)
{
	:0 HB:
	* \* (Platforms|PCU Commissioning) \*
	${ORGMAIL}

	:0:
	0/newprs
}

:0:
* ^TO1475-list
0/allmail

:0:
* ^TO1501-list
0/allmail

:0:
* ^TOar-list
0/allmail

:0:
* ^TO3201-list
0/allmail

:0:
* ^TO3205-list
0/allmail

:0:
* ^TO3209-list
0/allmail

:0:
* ^TO3223-list
0/allmail

:0:
* ^TO3227-list
0/allmail

:0:
* ^TO3231-list
0/allmail

:0:
* ^TObc555-list
0/allmail

:0:
* ^TOumts_project-list
0/umts

:0:
* ^TOumts_demo-list
0/umts

:0:
* ^FROMremoteaccess-admin-list
0/allmail

:0:
* ^Subject:.*WTS Account Reminder
0/allmail

:0:
* ^Subject:.*Remove Old ClearCase Views
0/allmail

:0:
* ^TOgsm_ccbpacket-list
0/cct

:0 c:
* ((^TOpknaack1@email.mot.com)|(^TOknaack@cig.mot.com)|(^FROM_DAEMON)|(^FROM_MAILER)|(^From:.*[Aa]ugsburg))
${ORGMAIL}

# the fetchmail 'post' script sends zwrites to me containing
# headers from new messages by looking in the 'headers' directory.

:0 Ah:
headers

:0:
* ^Subject:.*\[AllMail\]
0/allmail

:0:
* ^From:.*Corp-DynaList
0/allmail

:0:
* ^TOmotmsg1@email
0/allmail

:0:
* ^To:.*engww ce-ENGWW01
0/allmail

:0:
* ^From:.*CE4AUS-List-CE4AUS
0/allmail

:0:
* ^From:.*engww_ce-ENGWW01@email.mot.com
0/allmail

:0:
* ^From:.*NSS2MWW-List-NSS2MWW
0/allmail

:0:
* ^From:.*GTSS_UnitedStates-NSSAUS1
0/allmail

:0:
* ^From:.*GTSS_Worldwide-NSS1AWW
0/allmail

:0:
* ^From:.*List-1MOTIL
0/allmail

:0:
* ^From:.*MOTMSG1
0/allmail

:0:
* ^From:.*GISNEWS1
0/allmail

:0:
* ^From:.*NSS3AIL-List-NSS3AIL
0/allmail

:0:
* ^From:.*CE1AWW-List-CE1AWW
0/allmail

:0:
* ^From:.*Corp-MailList
0/allmail

:0:
* ^From:.*Office_Ceo
0/ceo

:0 c:
${ORGMAIL}

# the fetchmail 'post' script sends zwrites to me containing
# headers from new messages by looking in the 'headers' directory.

:0 Ah:
headers
