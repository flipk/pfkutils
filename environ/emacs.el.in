;
; emacs.el
;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-matching-paren-distance nil)
 '(column-number-mode t)
 '(compilation-scroll-output t)
 '(compile-command "@prefix@/bin/myemacs-compile")
 '(cscope-close-window-after-select nil)
 '(cscope-option-kernel-mode t)
 '(display-time-format "%H:%M")
 '(display-time-mail-file (quote false))
 '(display-time-mode t)
 '(face-font-family-alternatives
   (quote
    (("pfk" "courier" "fixed" "Monospace")
     ("pfk" "CMU Typewriter Text" "fixed" "courier")
     ("pfk" "helv" "helvetica" "arial" "fixed" "Sans Serif")
     ("pfk" "helvetica" "arial" "fixed" "helv"))))
 '(face-font-registry-alternatives
   (quote
    (("pfk" "gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030")
     ("pfk" "jisx0208.1990" "jisx0208.1983" "jisx0208.1978")
     ("pfk" "ksc5601.1989" "ksx1001.1992" "ksc5601.1987")
     ("pfk" "muletibetan-2" "muletibetan-0"))))
 '(file-precious-flag t)
 '(frame-title-format (list "emacs" (getenv "EMACS_NUMBER") "%*%b %m") t)
 '(global-semantic-stickyfunc-mode t)
 '(ibuffer-formats
   (quote
    ((mark modified read-only " "
	   (name 47 47 :left :elide)
	   " "
	   (size 9 -1 :right)
	   " "
	   (mode 16 16 :left :elide))
     (mark " "
	   (name 16 -1)
	   " " filename))))
 '(inhibit-startup-buffer-menu t)
 '(inhibit-startup-echo-area-message (getenv "USER"))
 '(inhibit-startup-screen t)
 '(initial-scratch-message "")
; putting this here doesnt work '(ivy-mode t)
 '(ivy-use-virtual-buffers t)
 '(menu-bar-mode nil)
 '(mode-line-format
   (quote
    (" " mode-line-mule-info mode-line-modified " " mode-line-buffer-identification " " global-mode-string " %[(" mode-name mode-line-process minor-mode-alist "%n" ")%] "
     (line-number-mode "L%l ")
     (column-number-mode "C%c ")
     (-3 . "%p"))))
 '(mode-line-inverse-video t)
 '(mouse-buffer-menu-maxlen 100)
 '(mouse-buffer-menu-mode-mult 100)
 '(speedbar-show-unknown-files t)
 '(tool-bar-mode nil)
 '(verilog-auto-delete-trailing-whitespace t)
 '(verilog-auto-inst-column 10)
 '(verilog-auto-newline nil)
 '(verilog-indent-begin-after-if nil))

(setq mouse-buffer-menu-mode-groups
      '((".*" . "Buffers")))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:foreground "yellow" :background "black" :font "pfk13"))))
; i dont know why this doesnt work!
; '(bold ((t (:font "pfk13bold"))))
 '(bold ((t (:font "pfk13" :foreground "white"))))
 '(bold-italic ((t (:inherit bold))))
 '(button ((t (:inherit default))))
 '(cursor ((t (:background "white" :foreground "red"))))
 '(dired-flagged ((t (:inherit default :foreground "red"))))
 '(dired-mark ((t (:inherit default :foreground "red"))))
 '(dired-marked ((t (:inherit default :foreground "green"))))
 '(dired-symlink ((t (:inherit default :foreground "pink"))))
 '(dired-warning ((t (:inherit default :foreground "red"))))
 '(error ((t (:inherit bold :foreground "red"))))
 '(fixed-pitch ((t (:inherit default))))
 '(font-lock-builtin-face ((t (:inherit default :foreground "LightSteelBlue"))))
 '(header-line ((t (:inherit mode-line :background "grey20" :foreground "grey90" :box nil))))
 '(hi-black-b ((t (:inherit default))))
 '(highlight ((t (:inherit bold :background "darkolivegreen"))))
 '(isearch ((t (:inherit default :background "palevioletred2" :foreground "brown4"))))
 '(italic ((t (:inherit default))))
 '(ivy-minibuffer-match-face-1 ((t (:inherit default :background "#555555"))))
 '(ivy-minibuffer-match-face-2 ((t (:inherit default :background "#777777"))))
 '(ivy-minibuffer-match-face-3 ((t (:inherit default :background "#7777ff"))))
 '(ivy-minibuffer-match-face-4 ((t (:inherit default :background "#8a498a"))))
 '(lazy-highlight ((t (:inherit default :background "paleturquoise4"))))
 '(magit-process-ng ((t (:inherit default :foreground "red"))))
 '(magit-process-ok ((t (:inherit default :foreground "green"))))
 '(match ((t (:inherit bold :background "RoyalBlue3"))))
 '(menu ((t (:inherit default))))
 '(minibuffer-prompt ((t (:inherit default :foreground "cyan"))))
 '(mode-line ((t (:inherit default :background "grey75" :foreground "black" :box (:line-width -1 :style released-button)))))
 '(mode-line-buffer-id ((t (:inherit bold :foreground "black"))))
 '(mode-line-emphasis ((t (:inherit bold))))
 '(mode-line-highlight ((t (:inherit bold :box (:line-width 2 :color "grey40" :style released-button)))))
 '(mode-line-inactive ((t (:inherit default :background "grey30" :foreground "grey80" :box (:line-width -1 :color "grey40")))))
 '(scroll-bar ((t (:background "grey85" :foreground "red"))))
 '(success ((t (:inherit bold :foreground "green"))))
 '(swiper-match-face-1 ((t (:inherit default :background "#555555"))))
 '(swiper-match-face-2 ((t (:inherit default :background "#777777"))))
 '(swiper-match-face-3 ((t (:inherit default :background "#7777ff"))))
 '(swiper-match-face-4 ((t (:inherit default :background "#8a498a"))))
 '(warning ((t (:inherit bold :foreground "pink")))))

(cond (window-system
       (progn
	 (let ((desktop (getenv "EMACS_NUMBER")))
	   (let ((minibuftitle (concat "Emacs Minibuffer" desktop)))
	     (setq
	      default-frame-alist
	      '(
;		(minibuffer . nil) (width . 81)
		(cursor-color . "red"))
;	      initial-frame-alist 'nil
;	      minibuffer-frame-alist
;	      (cons (cons 'title minibuftitle)
;		    '((top . 0) (left . 20) (width . 155) (height . 1)
;		      (auto-raise . t) (minibuffer-lines . 1)
;		      (vertical-scroll-bars . nil)
;		      (name . "Emacs Minibuffer")))

	      hilit-mode-enable-list  '(not text-mode)
	      hilit-background-mode   'dark
	      hilit-inhibit-hooks     nil
	      hilit-inhibit-rebinding nil
	      hilit-quietly           t)
	     (if desktop
		 (setq server-socket-dir
		       (concat "/tmp/"
			       (getenv "USER")
			       "/emacs-"
			       desktop)))
	     (server-start)))))
      ((not window-system)
       (progn
         (menu-bar-mode -1))))

(setq pfk-regular-font "pfk13")
(setq pfk-regular-bold-font "pfk13") ; pfk13bold !
(setq pfk-big-font "pfk20")
(setq pfk-big-bold-font "pfk20bold")

;(defun my-make-frame-hook (frame)
;  ""
;  (interactive)
;  (progn
;    (select-frame frame)
;    (set-frame-font pfk-small-font)
;    (set-foreground-color "yellow")
;    (set-background-color "black")
;    (set-cursor-color "red")))
;(defun my-init-hook ()
;  ""
;  (progn
;    (message "my-init-hook was run")))
;(add-hook 'after-init-hook 'my-init-hook)
;(add-hook 'after-make-frame-functions 'my-make-frame-hook)
;(run-at-time 1 nil 'my-fix-minibuffer)

(defvar c-mode-indent 4)
(defvar c-mode-tabs 0)
(defvar c-mode-tabwidth 8)

(defun set-c-mode-thingies () "setup for c mode"
  (interactive)
  (c-set-style "BSD")
  (let ((tabs-mode (if (= c-mode-tabs 0) nil 't)))
    (setq c-basic-offset c-mode-indent
	  indent-tabs-mode tabs-mode
	  tab-width c-mode-tabwidth)
    (local-set-key "\C-u" 'fix-c-buffer-my-way)))

(defun set-c-mode ( my-indent my-tabs my-tabwidth )
  "Set the C mode parameters"
  (interactive
"nEnter c-mode-indent value (4 or 8):
nEnter c-mode-tabs value (0 or 1):
nEnter c-mode-tabwidth value (4 or 8):")
  (setq c-progress-interval 1
	c-mode-indent my-indent
	c-mode-tabs my-tabs
	c-mode-tabwidth my-tabwidth)
  (set-c-mode-thingies))

(add-hook 'c-mode-hook   'set-c-mode-thingies)
(add-hook 'c++-mode-hook 'set-c-mode-thingies)

; let emacs track CWD changes by examining the shell prompt

(setq pfkdir "")

(defun my-track-shell-dir (text)
  (if (string-match "SHELL_CWD_BEGIN:\\(.*\\):SHELL_CWD_END\n" text)
      (let ((dir-start-pos (match-beginning 1))
	    (dir-end-pos (match-end 1))
	    (marker-start-pos (match-beginning 0))
	    (marker-end-pos (match-end 0))
	    (len (length text))
	    (ret "")
	    (new-dir ""))
	(setq new-dir (substring text dir-start-pos dir-end-pos))
	(cd new-dir)
	(message (concat "shell directory is " new-dir))
	(if (not (equal marker-start-pos 0))
	    (setq ret (substring text 0 marker-start-pos)))
	(if (not (equal marker-end-pos len))
	    (setq ret (concat ret (substring text marker-end-pos len))))
	ret)
    text))

(defun my-shell-setup ()
  "Track current directory"
  (add-hook 'comint-preoutput-filter-functions 'my-track-shell-dir nil t))

(setq shell-mode-hook 'my-shell-setup)

; show shell CWD in modeline

(defun add-mode-line-dirtrack ()
  (add-to-list 'mode-line-buffer-identification 
	       '(:propertize (" " default-directory " ")
;			     face dired-directory
)))

(add-hook 'shell-mode-hook 'add-mode-line-dirtrack)

; this doesn't work very well: moves focus out of compile
; buffer and thus only works once. must bind globally.
;(defun my-compile-mode-hook ()
;  (local-set-key [f8] 'next-error)
;  (local-set-key [C-f8] 'previous-error))
;(add-hook 'compilation-mode-hook 'my-compile-mode-hook)

(add-to-list 'auto-mode-alist '("\\.scss\\'" . css-mode))

(defun fix-verilog-buffer-my-way ()
  ""
  (interactive)
  (progn
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))))

(defun set-verilog-mode-thingies () "setup for verilog mode"
  (interactive)
  (setq indent-tabs-mode nil)
  (local-set-key "\C-u" 'fix-verilog-buffer-my-way))

(add-hook 'verilog-mode-hook 'set-verilog-mode-thingies)

(defun fix-c-buffer-my-way ()
  ""
  (interactive)
  (progn
    (if (= c-mode-tabs 1)
	(tabify (point-min) (point-max))
        (untabify (point-min) (point-max)))
    (indent-region (point-min) (point-max) nil)))

(setq pfk-make-big-flag nil)

(defun my-make-big () "make window font bigger"
  (interactive)
  (if pfk-make-big-flag
      (progn
	(message (concat "setting frame font to " pfk-regular-font))
	(set-face-font 'default pfk-regular-font)
	(set-face-font 'bold pfk-regular-bold-font)
	(setq pfk-make-big-flag nil))
    (progn
      (message (concat "setting frame font to " pfk-big-font))
      (set-face-font 'default pfk-big-font)
      (set-face-font 'bold pfk-big-bold-font)
      (setq pfk-make-big-flag t))))

(defun font-existsp (font)
  "Check that a font exists: http://www.emacswiki.org/emacs/SetFonts#toc8"
  (and (window-system)
       (fboundp 'x-list-fonts)
       (x-list-fonts font)))

;(font-existsp "-pfk-pfk-medium-r-semicondensed--13-120-75-75-c-60-iso10646-1")
;(font-existsp "pfk13")
;(font-existsp "-pfk-pfk-bold-r-semicondensed--13-120-75-75-c-60-iso10646-1")
;(font-existsp "pfk13bold")

(defun showhelp () "Show help string"
  (interactive)
  (message " f1=help f2=fill-region f3=make-big f4=setcmode f5=speedbar f6=eval f9=make-frame f10=delete-frame Cg=goto-line CxCw=dumb CxCy=co Cxy=cscope CxY=rebuild"))

(global-set-key [f1]  'showhelp)
(global-set-key [f2]  'fill-region)
(global-set-key [f3]  'my-make-big)
(global-set-key [f4]  'set-c-mode)
(global-set-key [f5]  'speedbar)
(global-set-key [f6]  'eval-last-sexp)
; f7 useless in my window manager
; f8 useless in a vnc session
(global-set-key [f9]  'make-frame)
(global-set-key [f10] 'delete-frame)
(global-set-key "\C-g" 'goto-line)
(global-set-key "\C-x\C-w" 'make-dumb-frame)
(global-set-key "\C-x\C-y" 'clearcase-checkout-file)
(global-set-key "\C-xy" 'cscope-window)
(global-set-key "\C-xY" 'cscope-rebuild)

(global-set-key [C-tab] 'buffer-menu)

; (call-process "argv[0]" infile buffer display "argv[1]" "argv[2]"...)
; infile describes the file to use as stdin
; buffer means buffer to place output into
;  - t means current buffer
;  - nil means discard
;  - 0 means discard and don't wait
; display should be nil (don't update output window)

(defun cscope-window ()
  "open cscope in a pfkterm"
  (interactive)
  (call-process "pfkterm" nil 0 nil
		"-g" "185x70+20+20"
		"-e" "@prefix@/bin/myemacs-cscope-helper"))

(defun cscope-rebuild ()
  "rebuild cscope database"
  (interactive)
  (call-process "pfkterm" nil 0 nil
		"-g" "80x10+200+200"
		"-e"
		"@prefix@/bin/myemacs-cscope-rebuild-helper"))

(defun clearcase-checkout-file ()
  "checkout a clearcase file"
  (interactive)
  (let ((fname (buffer-file-name)))
    (if buffer-read-only
	(progn
	  (toggle-read-only)
	  (message "About to checkout file %s..." fname)
	  (call-process "pfkterm" nil 0 nil
			"-g" "80x10+200+200" "-e"
			"@prefix@/bin/myemacs-checkout-helper"
			(buffer-file-name))
	  (message "Checked out file %s." fname))
      (message "File is already checked out?"))))

(defun make-dumb-frame ()
  "Make a frame with no menu bar and no scroll bar."
  (interactive)
  (make-frame '((menu-bar-lines . 0)
		(vertical-scroll-bars . nil)
		(width . 50) (height . 10))))

(defun ask-user-about-supersession-threat (fn)
  "overwrite emacs default version of this function"
  't)

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'erase-buffer 'disabled nil)

(add-to-list 'load-path "@prefix@/etc/emacs/")

; useful without ivy : (ido-mode)

;(require 'go-mode)
(require 'xcscope)
(require 'ivy)
(require 'swiper)
(require 'counsel)
(require 'magit)
(require 'git-gutter)

(cscope-setup)
;not sure these ever worked
;(global-set-key [f35] 'scroll-up)
;(global-set-key [f29] 'scroll-down)
;(global-set-key [f27] 'beginning-of-buffer)
;(global-set-key [f33] 'end-of-buffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key [S-f9] 'compile)
(global-set-key [f8] 'next-error)
(global-set-key [S-f8] 'previous-error)
(global-set-key (kbd "C-x g") 'magit-status)
;we'll see (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)

(semantic-mode)
(ivy-mode 1)
(global-git-gutter-mode +1)

;todo
;use-package
;org-mode
;git-timemachine
;C-w inside swiper needs somehow bound, forgot what it was.

(garbage-collect)
(message "Press F1 for a list of local keybindings.")
