/* -*- Mode:text; indent-tabs-mode:nil; tab-width:8 -*- */

----------------------- use

bk c file dir
bk u file
bk t file
bk d file ver
bk x file path path path path

----------------------- database elements

key: DBINFO "BKDBINFOKEY"
data: source directory path
      next version number (init to 1)
      list of versions present in file (init to empty)

key: VERSIONINFO  version_id
data: timestamp
      count of files in this version
      total bytes in this version

--each of these contains info on up to 100 files.
--group_number counts starting at 0. iterate group_number++ until key not found.
key: VERSIONINDEX  version_id  group_number
data:  array of up to 100 struct { filename }

key: FILEINFO version_id filename
data: sha256 hash
      timestamp
      file size

--information about a "blob" (a file without a name)
key: BLOBHASH sha256hash filesize
data: reference count
      first auid of data

--outside of btree

DATA AUID: binary blob of 64k or less
           auid of next 64k, or 0 if end of file

----------------------- algorithms

put_file
  calc hash of file
  lookup blobhash newhash filesize -> ref,auid
  if not found
    read file, write data AUIDs, make DATA AUID chain
    make new blobhash hash, ref=1, auid
  else
    bump refcount
  return hash

backup_update
   lookup dbinfo -> sourcedir, version#, prevversion#
   file_count = 0
   total_bytes = 0
   timestamp = now
   chdir to sourcedir and recurse thru files, for each file:
     stat file
     file_count ++
     total_bytes += file size
     lookup fileinfo prevversion# filename -> hash,ts,size
     if found
       compare {fileinfo,stat}.{timestamp,file size}
       if any not equal
         hash=put_file
       else
         lookup blobhash hash filesize -> ref,auid
         bump refcount
     else
       hash=put_file
     make new fileinfo version# filename, hash,ts,size
   update versioninfo : timestamp, file_count, total_bytes
   update dbinfo : add new version number and next_version_number++.

