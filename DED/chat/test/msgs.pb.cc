// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PFK {
namespace TestMsgs {

namespace {

const ::google::protobuf::Descriptor* CommandAdd_m_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandAdd_m_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_m_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_m_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseAdd_m_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseAdd_m_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_m_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_m_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgs_2eproto() {
  protobuf_AddDesc_msgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgs.proto");
  GOOGLE_CHECK(file != NULL);
  CommandAdd_m_descriptor_ = file->message_type(0);
  static const int CommandAdd_m_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAdd_m, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAdd_m, b_),
  };
  CommandAdd_m_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandAdd_m_descriptor_,
      CommandAdd_m::default_instance_,
      CommandAdd_m_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAdd_m, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAdd_m, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandAdd_m));
  Command_m_descriptor_ = file->message_type(1);
  static const int Command_m_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_m, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_m, add_),
  };
  Command_m_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_m_descriptor_,
      Command_m::default_instance_,
      Command_m_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_m, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_m, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command_m));
  ResponseAdd_m_descriptor_ = file->message_type(2);
  static const int ResponseAdd_m_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAdd_m, sum_),
  };
  ResponseAdd_m_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseAdd_m_descriptor_,
      ResponseAdd_m::default_instance_,
      ResponseAdd_m_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAdd_m, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAdd_m, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseAdd_m));
  Response_m_descriptor_ = file->message_type(3);
  static const int Response_m_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_m, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_m, add_),
  };
  Response_m_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_m_descriptor_,
      Response_m::default_instance_,
      Response_m_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_m, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_m, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_m));
  CommandType_descriptor_ = file->enum_type(0);
  ResponseType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandAdd_m_descriptor_, &CommandAdd_m::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_m_descriptor_, &Command_m::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseAdd_m_descriptor_, &ResponseAdd_m::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_m_descriptor_, &Response_m::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgs_2eproto() {
  delete CommandAdd_m::default_instance_;
  delete CommandAdd_m_reflection_;
  delete Command_m::default_instance_;
  delete Command_m_reflection_;
  delete ResponseAdd_m::default_instance_;
  delete ResponseAdd_m_reflection_;
  delete Response_m::default_instance_;
  delete Response_m_reflection_;
}

void protobuf_AddDesc_msgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmsgs.proto\022\014PFK.TestMsgs\"$\n\014CommandAdd"
    "_m\022\t\n\001a\030\001 \002(\005\022\t\n\001b\030\002 \002(\005\"]\n\tCommand_m\022\'\n"
    "\004type\030\001 \002(\0162\031.PFK.TestMsgs.CommandType\022\'"
    "\n\003add\030\002 \001(\0132\032.PFK.TestMsgs.CommandAdd_m\""
    "\034\n\rResponseAdd_m\022\013\n\003sum\030\001 \002(\005\"`\n\nRespons"
    "e_m\022(\n\004type\030\001 \002(\0162\032.PFK.TestMsgs.Respons"
    "eType\022(\n\003add\030\002 \001(\0132\033.PFK.TestMsgs.Respon"
    "seAdd_m*\036\n\013CommandType\022\017\n\013COMMAND_ADD\020\001*"
    " \n\014ResponseType\022\020\n\014RESPONSE_ADD\020\001", 353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgs.proto", &protobuf_RegisterTypes);
  CommandAdd_m::default_instance_ = new CommandAdd_m();
  Command_m::default_instance_ = new Command_m();
  ResponseAdd_m::default_instance_ = new ResponseAdd_m();
  Response_m::default_instance_ = new Response_m();
  CommandAdd_m::default_instance_->InitAsDefaultInstance();
  Command_m::default_instance_->InitAsDefaultInstance();
  ResponseAdd_m::default_instance_->InitAsDefaultInstance();
  Response_m::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgs_2eproto {
  StaticDescriptorInitializer_msgs_2eproto() {
    protobuf_AddDesc_msgs_2eproto();
  }
} static_descriptor_initializer_msgs_2eproto_;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandType_descriptor_;
}
bool CommandType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseType_descriptor_;
}
bool ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CommandAdd_m::kAFieldNumber;
const int CommandAdd_m::kBFieldNumber;
#endif  // !_MSC_VER

CommandAdd_m::CommandAdd_m()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandAdd_m::InitAsDefaultInstance() {
}

CommandAdd_m::CommandAdd_m(const CommandAdd_m& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandAdd_m::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandAdd_m::~CommandAdd_m() {
  SharedDtor();
}

void CommandAdd_m::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandAdd_m::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandAdd_m::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandAdd_m_descriptor_;
}

const CommandAdd_m& CommandAdd_m::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgs_2eproto();
  return *default_instance_;
}

CommandAdd_m* CommandAdd_m::default_instance_ = NULL;

CommandAdd_m* CommandAdd_m::New() const {
  return new CommandAdd_m;
}

void CommandAdd_m::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandAdd_m::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // required int32 b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandAdd_m::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }

  // required int32 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandAdd_m::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a(), target);
  }

  // required int32 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandAdd_m::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

    // required int32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandAdd_m::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandAdd_m* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandAdd_m*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandAdd_m::MergeFrom(const CommandAdd_m& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandAdd_m::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAdd_m::CopyFrom(const CommandAdd_m& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAdd_m::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommandAdd_m::Swap(CommandAdd_m* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandAdd_m::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandAdd_m_descriptor_;
  metadata.reflection = CommandAdd_m_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command_m::kTypeFieldNumber;
const int Command_m::kAddFieldNumber;
#endif  // !_MSC_VER

Command_m::Command_m()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command_m::InitAsDefaultInstance() {
  add_ = const_cast< ::PFK::TestMsgs::CommandAdd_m*>(&::PFK::TestMsgs::CommandAdd_m::default_instance());
}

Command_m::Command_m(const Command_m& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command_m::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  add_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command_m::~Command_m() {
  SharedDtor();
}

void Command_m::SharedDtor() {
  if (this != default_instance_) {
    delete add_;
  }
}

void Command_m::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command_m::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_m_descriptor_;
}

const Command_m& Command_m::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgs_2eproto();
  return *default_instance_;
}

Command_m* Command_m::default_instance_ = NULL;

Command_m* Command_m::New() const {
  return new Command_m;
}

void Command_m::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_add()) {
      if (add_ != NULL) add_->::PFK::TestMsgs::CommandAdd_m::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command_m::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PFK.TestMsgs.CommandType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PFK::TestMsgs::CommandType_IsValid(value)) {
            set_type(static_cast< ::PFK::TestMsgs::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add;
        break;
      }

      // optional .PFK.TestMsgs.CommandAdd_m add = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command_m::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PFK.TestMsgs.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PFK.TestMsgs.CommandAdd_m add = 2;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command_m::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PFK.TestMsgs.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PFK.TestMsgs.CommandAdd_m add = 2;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command_m::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PFK.TestMsgs.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PFK.TestMsgs.CommandAdd_m add = 2;
    if (has_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command_m::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command_m* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command_m*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command_m::MergeFrom(const Command_m& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_add()) {
      mutable_add()->::PFK::TestMsgs::CommandAdd_m::MergeFrom(from.add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command_m::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command_m::CopyFrom(const Command_m& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_m::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_add()) {
    if (!this->add().IsInitialized()) return false;
  }
  return true;
}

void Command_m::Swap(Command_m* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(add_, other->add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command_m::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_m_descriptor_;
  metadata.reflection = Command_m_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseAdd_m::kSumFieldNumber;
#endif  // !_MSC_VER

ResponseAdd_m::ResponseAdd_m()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseAdd_m::InitAsDefaultInstance() {
}

ResponseAdd_m::ResponseAdd_m(const ResponseAdd_m& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseAdd_m::SharedCtor() {
  _cached_size_ = 0;
  sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseAdd_m::~ResponseAdd_m() {
  SharedDtor();
}

void ResponseAdd_m::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseAdd_m::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseAdd_m::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseAdd_m_descriptor_;
}

const ResponseAdd_m& ResponseAdd_m::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgs_2eproto();
  return *default_instance_;
}

ResponseAdd_m* ResponseAdd_m::default_instance_ = NULL;

ResponseAdd_m* ResponseAdd_m::New() const {
  return new ResponseAdd_m;
}

void ResponseAdd_m::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseAdd_m::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseAdd_m::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sum = 1;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseAdd_m::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sum = 1;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseAdd_m::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sum = 1;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseAdd_m::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseAdd_m* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseAdd_m*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseAdd_m::MergeFrom(const ResponseAdd_m& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseAdd_m::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAdd_m::CopyFrom(const ResponseAdd_m& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAdd_m::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResponseAdd_m::Swap(ResponseAdd_m* other) {
  if (other != this) {
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseAdd_m::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseAdd_m_descriptor_;
  metadata.reflection = ResponseAdd_m_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response_m::kTypeFieldNumber;
const int Response_m::kAddFieldNumber;
#endif  // !_MSC_VER

Response_m::Response_m()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response_m::InitAsDefaultInstance() {
  add_ = const_cast< ::PFK::TestMsgs::ResponseAdd_m*>(&::PFK::TestMsgs::ResponseAdd_m::default_instance());
}

Response_m::Response_m(const Response_m& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response_m::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  add_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_m::~Response_m() {
  SharedDtor();
}

void Response_m::SharedDtor() {
  if (this != default_instance_) {
    delete add_;
  }
}

void Response_m::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_m::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_m_descriptor_;
}

const Response_m& Response_m::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgs_2eproto();
  return *default_instance_;
}

Response_m* Response_m::default_instance_ = NULL;

Response_m* Response_m::New() const {
  return new Response_m;
}

void Response_m::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_add()) {
      if (add_ != NULL) add_->::PFK::TestMsgs::ResponseAdd_m::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_m::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PFK.TestMsgs.ResponseType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PFK::TestMsgs::ResponseType_IsValid(value)) {
            set_type(static_cast< ::PFK::TestMsgs::ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add;
        break;
      }

      // optional .PFK.TestMsgs.ResponseAdd_m add = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response_m::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PFK.TestMsgs.ResponseType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PFK.TestMsgs.ResponseAdd_m add = 2;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response_m::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PFK.TestMsgs.ResponseType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PFK.TestMsgs.ResponseAdd_m add = 2;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response_m::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PFK.TestMsgs.ResponseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PFK.TestMsgs.ResponseAdd_m add = 2;
    if (has_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_m::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_m* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_m*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_m::MergeFrom(const Response_m& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_add()) {
      mutable_add()->::PFK::TestMsgs::ResponseAdd_m::MergeFrom(from.add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_m::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_m::CopyFrom(const Response_m& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_m::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_add()) {
    if (!this->add().IsInitialized()) return false;
  }
  return true;
}

void Response_m::Swap(Response_m* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(add_, other->add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_m::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_m_descriptor_;
  metadata.reflection = Response_m_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestMsgs
}  // namespace PFK

// @@protoc_insertion_point(global_scope)
