
ENC TEL GATE PROXY + ENC TEL GATE WORKER
----------------------------------------

- create adm hookup listening tcp port 
- when connection received
   - create 'user' adm gate port
   - create 'network' adm gate port
      - create packet encoder and decoder.
- user and network exchange raw data; all raw data passes
  through packet_decoder filter.

- proxy hookup fd requires pure virtual factory class
  that constructs proxy gate fd and allocates pipe#

- proxy gate fd requires pure virtual io class; proxy list mgr
  constructs concrete io class which encodes pipe# and calls
  net adm gate encoder

- config fd requires pure virtual io class which proxy list mgr
  makes concrete to trigger add-listen requests and delete-listen
  requests


use case 1 : packet arrival for any pipe
- raw data PFK1 plus valid base64 data enters net adm gate fd
- decoder recognizes header and body
- decoder calls packet_decoder_io derived class method
  which calls pipe mgr -> handle_pkt.
- handle_pkt examines pipe number
- calls pipe_list[ pipe_number ] -> handle_pkt

use case 2 : packet arrives for pipe 0
- switch on packet type
     - add-listen request
          - create proxy hookup fd
     - delete-listen request
          - delete proxy hookup fd
            (implies that proxy list mgr must maintain list of 
             port number -> proxy hookup mappings)
     - connect request for pipe#
          - create proxy gate fd in connect mode and put in pipe_list
     - close request for pipe#
          - delete proxy gate fd

use case 3 : packet arrives for pipe>0
- proxy gate fd writes packet data to fd

use case 4 : connect arrives to proxy hookup
- create proxy gate fd
- allocate unused pipe#
- send connect-request to remote pipe 0

use case 5 : data arrives to proxy gate fd
- construct data and send to remote pipe#




PROTOCOL
--------
the protocol exhanged between the worker and proxy is as
follows. packets may be up to 1600 bytes long.  Packets are base64
encoded with a meaningless newline inserted every 72 characters.

A packet begins with the 4 character sequence "PFK1".
What follows is a sequence of N 4-character base64-encoded characters.
Every 72 characters, a newline is inserted.
Each 4-character group translates into three bytes.
The packet contains the following data:
	- two-byte big-endian packet length value (len)
	- two-byte big-endian pipe number
	- (len) bytes of packet data.
	- two-byte big-endian checksum value
		- note the checksum is calculated over only the data bytes
The packet decoder acts as a filter, removing every character
sequence recognized as a packet and passing through every character
which is not part of a packet.
