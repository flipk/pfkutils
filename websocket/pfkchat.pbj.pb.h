// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pfkchat.pbj

#ifndef PROTOBUF_pfkchat_2epbj__INCLUDED
#define PROTOBUF_pfkchat_2epbj__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PFK {
namespace Chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pfkchat_2epbj();
void protobuf_AssignDesc_pfkchat_2epbj();
void protobuf_ShutdownFile_pfkchat_2epbj();

class Username;
class NewUsername;
class IM_Message;
class ClientToServer;
class UserList;
class UserStatus;
class Notification;
class ServerToClient;

enum ClientToServer_ClientToServerType {
  ClientToServer_ClientToServerType_LOGIN = 1,
  ClientToServer_ClientToServerType_CHANGE_USERNAME = 2,
  ClientToServer_ClientToServerType_IM_MESSAGE = 3,
  ClientToServer_ClientToServerType_PING = 4
};
bool ClientToServer_ClientToServerType_IsValid(int value);
const ClientToServer_ClientToServerType ClientToServer_ClientToServerType_ClientToServerType_MIN = ClientToServer_ClientToServerType_LOGIN;
const ClientToServer_ClientToServerType ClientToServer_ClientToServerType_ClientToServerType_MAX = ClientToServer_ClientToServerType_PING;
const int ClientToServer_ClientToServerType_ClientToServerType_ARRAYSIZE = ClientToServer_ClientToServerType_ClientToServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientToServer_ClientToServerType_descriptor();
inline const ::std::string& ClientToServer_ClientToServerType_Name(ClientToServer_ClientToServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientToServer_ClientToServerType_descriptor(), value);
}
inline bool ClientToServer_ClientToServerType_Parse(
    const ::std::string& name, ClientToServer_ClientToServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientToServer_ClientToServerType>(
    ClientToServer_ClientToServerType_descriptor(), name, value);
}
enum ServerToClient_ServerToClientType {
  ServerToClient_ServerToClientType_USER_LIST = 1,
  ServerToClient_ServerToClientType_USER_STATUS = 2,
  ServerToClient_ServerToClientType_LOGIN_NOTIFICATION = 3,
  ServerToClient_ServerToClientType_LOGOUT_NOTIFICATION = 4,
  ServerToClient_ServerToClientType_IM_MESSAGE = 5
};
bool ServerToClient_ServerToClientType_IsValid(int value);
const ServerToClient_ServerToClientType ServerToClient_ServerToClientType_ServerToClientType_MIN = ServerToClient_ServerToClientType_USER_LIST;
const ServerToClient_ServerToClientType ServerToClient_ServerToClientType_ServerToClientType_MAX = ServerToClient_ServerToClientType_IM_MESSAGE;
const int ServerToClient_ServerToClientType_ServerToClientType_ARRAYSIZE = ServerToClient_ServerToClientType_ServerToClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerToClient_ServerToClientType_descriptor();
inline const ::std::string& ServerToClient_ServerToClientType_Name(ServerToClient_ServerToClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerToClient_ServerToClientType_descriptor(), value);
}
inline bool ServerToClient_ServerToClientType_Parse(
    const ::std::string& name, ServerToClient_ServerToClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerToClient_ServerToClientType>(
    ServerToClient_ServerToClientType_descriptor(), name, value);
}
// ===================================================================

class Username : public ::google::protobuf::Message {
 public:
  Username();
  virtual ~Username();

  Username(const Username& from);

  inline Username& operator=(const Username& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Username& default_instance();

  void Swap(Username* other);

  // implements Message ----------------------------------------------

  Username* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Username& from);
  void MergeFrom(const Username& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:PFK.Chat.Username)
 private:
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static Username* default_instance_;
};
// -------------------------------------------------------------------

class NewUsername : public ::google::protobuf::Message {
 public:
  NewUsername();
  virtual ~NewUsername();

  NewUsername(const NewUsername& from);

  inline NewUsername& operator=(const NewUsername& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewUsername& default_instance();

  void Swap(NewUsername* other);

  // implements Message ----------------------------------------------

  NewUsername* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewUsername& from);
  void MergeFrom(const NewUsername& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string oldusername = 1;
  inline bool has_oldusername() const;
  inline void clear_oldusername();
  static const int kOldusernameFieldNumber = 1;
  inline const ::std::string& oldusername() const;
  inline void set_oldusername(const ::std::string& value);
  inline void set_oldusername(const char* value);
  inline void set_oldusername(const char* value, size_t size);
  inline ::std::string* mutable_oldusername();
  inline ::std::string* release_oldusername();
  inline void set_allocated_oldusername(::std::string* oldusername);

  // required string newusername = 2;
  inline bool has_newusername() const;
  inline void clear_newusername();
  static const int kNewusernameFieldNumber = 2;
  inline const ::std::string& newusername() const;
  inline void set_newusername(const ::std::string& value);
  inline void set_newusername(const char* value);
  inline void set_newusername(const char* value, size_t size);
  inline ::std::string* mutable_newusername();
  inline ::std::string* release_newusername();
  inline void set_allocated_newusername(::std::string* newusername);

  // @@protoc_insertion_point(class_scope:PFK.Chat.NewUsername)
 private:
  inline void set_has_oldusername();
  inline void clear_has_oldusername();
  inline void set_has_newusername();
  inline void clear_has_newusername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* oldusername_;
  ::std::string* newusername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static NewUsername* default_instance_;
};
// -------------------------------------------------------------------

class IM_Message : public ::google::protobuf::Message {
 public:
  IM_Message();
  virtual ~IM_Message();

  IM_Message(const IM_Message& from);

  inline IM_Message& operator=(const IM_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IM_Message& default_instance();

  void Swap(IM_Message* other);

  // implements Message ----------------------------------------------

  IM_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IM_Message& from);
  void MergeFrom(const IM_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:PFK.Chat.IM_Message)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static IM_Message* default_instance_;
};
// -------------------------------------------------------------------

class ClientToServer : public ::google::protobuf::Message {
 public:
  ClientToServer();
  virtual ~ClientToServer();

  ClientToServer(const ClientToServer& from);

  inline ClientToServer& operator=(const ClientToServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientToServer& default_instance();

  void Swap(ClientToServer* other);

  // implements Message ----------------------------------------------

  ClientToServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientToServer& from);
  void MergeFrom(const ClientToServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClientToServer_ClientToServerType ClientToServerType;
  static const ClientToServerType LOGIN = ClientToServer_ClientToServerType_LOGIN;
  static const ClientToServerType CHANGE_USERNAME = ClientToServer_ClientToServerType_CHANGE_USERNAME;
  static const ClientToServerType IM_MESSAGE = ClientToServer_ClientToServerType_IM_MESSAGE;
  static const ClientToServerType PING = ClientToServer_ClientToServerType_PING;
  static inline bool ClientToServerType_IsValid(int value) {
    return ClientToServer_ClientToServerType_IsValid(value);
  }
  static const ClientToServerType ClientToServerType_MIN =
    ClientToServer_ClientToServerType_ClientToServerType_MIN;
  static const ClientToServerType ClientToServerType_MAX =
    ClientToServer_ClientToServerType_ClientToServerType_MAX;
  static const int ClientToServerType_ARRAYSIZE =
    ClientToServer_ClientToServerType_ClientToServerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ClientToServerType_descriptor() {
    return ClientToServer_ClientToServerType_descriptor();
  }
  static inline const ::std::string& ClientToServerType_Name(ClientToServerType value) {
    return ClientToServer_ClientToServerType_Name(value);
  }
  static inline bool ClientToServerType_Parse(const ::std::string& name,
      ClientToServerType* value) {
    return ClientToServer_ClientToServerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PFK.Chat.ClientToServer.ClientToServerType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PFK::Chat::ClientToServer_ClientToServerType type() const;
  inline void set_type(::PFK::Chat::ClientToServer_ClientToServerType value);

  // optional .PFK.Chat.Username login = 2;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 2;
  inline const ::PFK::Chat::Username& login() const;
  inline ::PFK::Chat::Username* mutable_login();
  inline ::PFK::Chat::Username* release_login();
  inline void set_allocated_login(::PFK::Chat::Username* login);

  // optional .PFK.Chat.NewUsername changeUsername = 3;
  inline bool has_changeusername() const;
  inline void clear_changeusername();
  static const int kChangeUsernameFieldNumber = 3;
  inline const ::PFK::Chat::NewUsername& changeusername() const;
  inline ::PFK::Chat::NewUsername* mutable_changeusername();
  inline ::PFK::Chat::NewUsername* release_changeusername();
  inline void set_allocated_changeusername(::PFK::Chat::NewUsername* changeusername);

  // optional .PFK.Chat.IM_Message imMessage = 4;
  inline bool has_immessage() const;
  inline void clear_immessage();
  static const int kImMessageFieldNumber = 4;
  inline const ::PFK::Chat::IM_Message& immessage() const;
  inline ::PFK::Chat::IM_Message* mutable_immessage();
  inline ::PFK::Chat::IM_Message* release_immessage();
  inline void set_allocated_immessage(::PFK::Chat::IM_Message* immessage);

  // @@protoc_insertion_point(class_scope:PFK.Chat.ClientToServer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_changeusername();
  inline void clear_has_changeusername();
  inline void set_has_immessage();
  inline void clear_has_immessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PFK::Chat::Username* login_;
  ::PFK::Chat::NewUsername* changeusername_;
  ::PFK::Chat::IM_Message* immessage_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static ClientToServer* default_instance_;
};
// -------------------------------------------------------------------

class UserList : public ::google::protobuf::Message {
 public:
  UserList();
  virtual ~UserList();

  UserList(const UserList& from);

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserList& default_instance();

  void Swap(UserList* other);

  // implements Message ----------------------------------------------

  UserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserList& from);
  void MergeFrom(const UserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string username = 1;
  inline int username_size() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username(int index) const;
  inline ::std::string* mutable_username(int index);
  inline void set_username(int index, const ::std::string& value);
  inline void set_username(int index, const char* value);
  inline void set_username(int index, const char* value, size_t size);
  inline ::std::string* add_username();
  inline void add_username(const ::std::string& value);
  inline void add_username(const char* value);
  inline void add_username(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& username() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_username();

  // @@protoc_insertion_point(class_scope:PFK.Chat.UserList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> username_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static UserList* default_instance_;
};
// -------------------------------------------------------------------

class UserStatus : public ::google::protobuf::Message {
 public:
  UserStatus();
  virtual ~UserStatus();

  UserStatus(const UserStatus& from);

  inline UserStatus& operator=(const UserStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStatus& default_instance();

  void Swap(UserStatus* other);

  // implements Message ----------------------------------------------

  UserStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserStatus& from);
  void MergeFrom(const UserStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:PFK.Chat.UserStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static UserStatus* default_instance_;
};
// -------------------------------------------------------------------

class Notification : public ::google::protobuf::Message {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();

  void Swap(Notification* other);

  // implements Message ----------------------------------------------

  Notification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:PFK.Chat.Notification)
 private:
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static Notification* default_instance_;
};
// -------------------------------------------------------------------

class ServerToClient : public ::google::protobuf::Message {
 public:
  ServerToClient();
  virtual ~ServerToClient();

  ServerToClient(const ServerToClient& from);

  inline ServerToClient& operator=(const ServerToClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerToClient& default_instance();

  void Swap(ServerToClient* other);

  // implements Message ----------------------------------------------

  ServerToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerToClient& from);
  void MergeFrom(const ServerToClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerToClient_ServerToClientType ServerToClientType;
  static const ServerToClientType USER_LIST = ServerToClient_ServerToClientType_USER_LIST;
  static const ServerToClientType USER_STATUS = ServerToClient_ServerToClientType_USER_STATUS;
  static const ServerToClientType LOGIN_NOTIFICATION = ServerToClient_ServerToClientType_LOGIN_NOTIFICATION;
  static const ServerToClientType LOGOUT_NOTIFICATION = ServerToClient_ServerToClientType_LOGOUT_NOTIFICATION;
  static const ServerToClientType IM_MESSAGE = ServerToClient_ServerToClientType_IM_MESSAGE;
  static inline bool ServerToClientType_IsValid(int value) {
    return ServerToClient_ServerToClientType_IsValid(value);
  }
  static const ServerToClientType ServerToClientType_MIN =
    ServerToClient_ServerToClientType_ServerToClientType_MIN;
  static const ServerToClientType ServerToClientType_MAX =
    ServerToClient_ServerToClientType_ServerToClientType_MAX;
  static const int ServerToClientType_ARRAYSIZE =
    ServerToClient_ServerToClientType_ServerToClientType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerToClientType_descriptor() {
    return ServerToClient_ServerToClientType_descriptor();
  }
  static inline const ::std::string& ServerToClientType_Name(ServerToClientType value) {
    return ServerToClient_ServerToClientType_Name(value);
  }
  static inline bool ServerToClientType_Parse(const ::std::string& name,
      ServerToClientType* value) {
    return ServerToClient_ServerToClientType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PFK.Chat.ServerToClient.ServerToClientType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PFK::Chat::ServerToClient_ServerToClientType type() const;
  inline void set_type(::PFK::Chat::ServerToClient_ServerToClientType value);

  // optional .PFK.Chat.UserList userList = 2;
  inline bool has_userlist() const;
  inline void clear_userlist();
  static const int kUserListFieldNumber = 2;
  inline const ::PFK::Chat::UserList& userlist() const;
  inline ::PFK::Chat::UserList* mutable_userlist();
  inline ::PFK::Chat::UserList* release_userlist();
  inline void set_allocated_userlist(::PFK::Chat::UserList* userlist);

  // optional .PFK.Chat.UserStatus userStatus = 3;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserStatusFieldNumber = 3;
  inline const ::PFK::Chat::UserStatus& userstatus() const;
  inline ::PFK::Chat::UserStatus* mutable_userstatus();
  inline ::PFK::Chat::UserStatus* release_userstatus();
  inline void set_allocated_userstatus(::PFK::Chat::UserStatus* userstatus);

  // optional .PFK.Chat.Notification notification = 4;
  inline bool has_notification() const;
  inline void clear_notification();
  static const int kNotificationFieldNumber = 4;
  inline const ::PFK::Chat::Notification& notification() const;
  inline ::PFK::Chat::Notification* mutable_notification();
  inline ::PFK::Chat::Notification* release_notification();
  inline void set_allocated_notification(::PFK::Chat::Notification* notification);

  // optional .PFK.Chat.IM_Message imMessage = 5;
  inline bool has_immessage() const;
  inline void clear_immessage();
  static const int kImMessageFieldNumber = 5;
  inline const ::PFK::Chat::IM_Message& immessage() const;
  inline ::PFK::Chat::IM_Message* mutable_immessage();
  inline ::PFK::Chat::IM_Message* release_immessage();
  inline void set_allocated_immessage(::PFK::Chat::IM_Message* immessage);

  // @@protoc_insertion_point(class_scope:PFK.Chat.ServerToClient)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_userlist();
  inline void clear_has_userlist();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();
  inline void set_has_notification();
  inline void clear_has_notification();
  inline void set_has_immessage();
  inline void clear_has_immessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PFK::Chat::UserList* userlist_;
  ::PFK::Chat::UserStatus* userstatus_;
  ::PFK::Chat::Notification* notification_;
  ::PFK::Chat::IM_Message* immessage_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_pfkchat_2epbj();
  friend void protobuf_AssignDesc_pfkchat_2epbj();
  friend void protobuf_ShutdownFile_pfkchat_2epbj();

  void InitAsDefaultInstance();
  static ServerToClient* default_instance_;
};
// ===================================================================


// ===================================================================

// Username

// required string username = 1;
inline bool Username::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Username::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Username::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Username::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Username::username() const {
  return *username_;
}
inline void Username::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Username::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Username::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Username::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Username::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Username::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NewUsername

// required string oldusername = 1;
inline bool NewUsername::has_oldusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewUsername::set_has_oldusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewUsername::clear_has_oldusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewUsername::clear_oldusername() {
  if (oldusername_ != &::google::protobuf::internal::kEmptyString) {
    oldusername_->clear();
  }
  clear_has_oldusername();
}
inline const ::std::string& NewUsername::oldusername() const {
  return *oldusername_;
}
inline void NewUsername::set_oldusername(const ::std::string& value) {
  set_has_oldusername();
  if (oldusername_ == &::google::protobuf::internal::kEmptyString) {
    oldusername_ = new ::std::string;
  }
  oldusername_->assign(value);
}
inline void NewUsername::set_oldusername(const char* value) {
  set_has_oldusername();
  if (oldusername_ == &::google::protobuf::internal::kEmptyString) {
    oldusername_ = new ::std::string;
  }
  oldusername_->assign(value);
}
inline void NewUsername::set_oldusername(const char* value, size_t size) {
  set_has_oldusername();
  if (oldusername_ == &::google::protobuf::internal::kEmptyString) {
    oldusername_ = new ::std::string;
  }
  oldusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewUsername::mutable_oldusername() {
  set_has_oldusername();
  if (oldusername_ == &::google::protobuf::internal::kEmptyString) {
    oldusername_ = new ::std::string;
  }
  return oldusername_;
}
inline ::std::string* NewUsername::release_oldusername() {
  clear_has_oldusername();
  if (oldusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldusername_;
    oldusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewUsername::set_allocated_oldusername(::std::string* oldusername) {
  if (oldusername_ != &::google::protobuf::internal::kEmptyString) {
    delete oldusername_;
  }
  if (oldusername) {
    set_has_oldusername();
    oldusername_ = oldusername;
  } else {
    clear_has_oldusername();
    oldusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newusername = 2;
inline bool NewUsername::has_newusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewUsername::set_has_newusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewUsername::clear_has_newusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewUsername::clear_newusername() {
  if (newusername_ != &::google::protobuf::internal::kEmptyString) {
    newusername_->clear();
  }
  clear_has_newusername();
}
inline const ::std::string& NewUsername::newusername() const {
  return *newusername_;
}
inline void NewUsername::set_newusername(const ::std::string& value) {
  set_has_newusername();
  if (newusername_ == &::google::protobuf::internal::kEmptyString) {
    newusername_ = new ::std::string;
  }
  newusername_->assign(value);
}
inline void NewUsername::set_newusername(const char* value) {
  set_has_newusername();
  if (newusername_ == &::google::protobuf::internal::kEmptyString) {
    newusername_ = new ::std::string;
  }
  newusername_->assign(value);
}
inline void NewUsername::set_newusername(const char* value, size_t size) {
  set_has_newusername();
  if (newusername_ == &::google::protobuf::internal::kEmptyString) {
    newusername_ = new ::std::string;
  }
  newusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewUsername::mutable_newusername() {
  set_has_newusername();
  if (newusername_ == &::google::protobuf::internal::kEmptyString) {
    newusername_ = new ::std::string;
  }
  return newusername_;
}
inline ::std::string* NewUsername::release_newusername() {
  clear_has_newusername();
  if (newusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newusername_;
    newusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewUsername::set_allocated_newusername(::std::string* newusername) {
  if (newusername_ != &::google::protobuf::internal::kEmptyString) {
    delete newusername_;
  }
  if (newusername) {
    set_has_newusername();
    newusername_ = newusername;
  } else {
    clear_has_newusername();
    newusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// IM_Message

// required string username = 1;
inline bool IM_Message::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IM_Message::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IM_Message::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IM_Message::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& IM_Message::username() const {
  return *username_;
}
inline void IM_Message::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void IM_Message::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void IM_Message::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IM_Message::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* IM_Message::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IM_Message::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string msg = 2;
inline bool IM_Message::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IM_Message::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IM_Message::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IM_Message::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& IM_Message::msg() const {
  return *msg_;
}
inline void IM_Message::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IM_Message::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IM_Message::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IM_Message::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* IM_Message::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IM_Message::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientToServer

// required .PFK.Chat.ClientToServer.ClientToServerType type = 1;
inline bool ClientToServer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientToServer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientToServer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientToServer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PFK::Chat::ClientToServer_ClientToServerType ClientToServer::type() const {
  return static_cast< ::PFK::Chat::ClientToServer_ClientToServerType >(type_);
}
inline void ClientToServer::set_type(::PFK::Chat::ClientToServer_ClientToServerType value) {
  assert(::PFK::Chat::ClientToServer_ClientToServerType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PFK.Chat.Username login = 2;
inline bool ClientToServer::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientToServer::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientToServer::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientToServer::clear_login() {
  if (login_ != NULL) login_->::PFK::Chat::Username::Clear();
  clear_has_login();
}
inline const ::PFK::Chat::Username& ClientToServer::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::PFK::Chat::Username* ClientToServer::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::PFK::Chat::Username;
  return login_;
}
inline ::PFK::Chat::Username* ClientToServer::release_login() {
  clear_has_login();
  ::PFK::Chat::Username* temp = login_;
  login_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_login(::PFK::Chat::Username* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
}

// optional .PFK.Chat.NewUsername changeUsername = 3;
inline bool ClientToServer::has_changeusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientToServer::set_has_changeusername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientToServer::clear_has_changeusername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientToServer::clear_changeusername() {
  if (changeusername_ != NULL) changeusername_->::PFK::Chat::NewUsername::Clear();
  clear_has_changeusername();
}
inline const ::PFK::Chat::NewUsername& ClientToServer::changeusername() const {
  return changeusername_ != NULL ? *changeusername_ : *default_instance_->changeusername_;
}
inline ::PFK::Chat::NewUsername* ClientToServer::mutable_changeusername() {
  set_has_changeusername();
  if (changeusername_ == NULL) changeusername_ = new ::PFK::Chat::NewUsername;
  return changeusername_;
}
inline ::PFK::Chat::NewUsername* ClientToServer::release_changeusername() {
  clear_has_changeusername();
  ::PFK::Chat::NewUsername* temp = changeusername_;
  changeusername_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_changeusername(::PFK::Chat::NewUsername* changeusername) {
  delete changeusername_;
  changeusername_ = changeusername;
  if (changeusername) {
    set_has_changeusername();
  } else {
    clear_has_changeusername();
  }
}

// optional .PFK.Chat.IM_Message imMessage = 4;
inline bool ClientToServer::has_immessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientToServer::set_has_immessage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientToServer::clear_has_immessage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientToServer::clear_immessage() {
  if (immessage_ != NULL) immessage_->::PFK::Chat::IM_Message::Clear();
  clear_has_immessage();
}
inline const ::PFK::Chat::IM_Message& ClientToServer::immessage() const {
  return immessage_ != NULL ? *immessage_ : *default_instance_->immessage_;
}
inline ::PFK::Chat::IM_Message* ClientToServer::mutable_immessage() {
  set_has_immessage();
  if (immessage_ == NULL) immessage_ = new ::PFK::Chat::IM_Message;
  return immessage_;
}
inline ::PFK::Chat::IM_Message* ClientToServer::release_immessage() {
  clear_has_immessage();
  ::PFK::Chat::IM_Message* temp = immessage_;
  immessage_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_immessage(::PFK::Chat::IM_Message* immessage) {
  delete immessage_;
  immessage_ = immessage;
  if (immessage) {
    set_has_immessage();
  } else {
    clear_has_immessage();
  }
}

// -------------------------------------------------------------------

// UserList

// repeated string username = 1;
inline int UserList::username_size() const {
  return username_.size();
}
inline void UserList::clear_username() {
  username_.Clear();
}
inline const ::std::string& UserList::username(int index) const {
  return username_.Get(index);
}
inline ::std::string* UserList::mutable_username(int index) {
  return username_.Mutable(index);
}
inline void UserList::set_username(int index, const ::std::string& value) {
  username_.Mutable(index)->assign(value);
}
inline void UserList::set_username(int index, const char* value) {
  username_.Mutable(index)->assign(value);
}
inline void UserList::set_username(int index, const char* value, size_t size) {
  username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserList::add_username() {
  return username_.Add();
}
inline void UserList::add_username(const ::std::string& value) {
  username_.Add()->assign(value);
}
inline void UserList::add_username(const char* value) {
  username_.Add()->assign(value);
}
inline void UserList::add_username(const char* value, size_t size) {
  username_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserList::username() const {
  return username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserList::mutable_username() {
  return &username_;
}

// -------------------------------------------------------------------

// UserStatus

// required string status = 1;
inline bool UserStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStatus::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& UserStatus::status() const {
  return *status_;
}
inline void UserStatus::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void UserStatus::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void UserStatus::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserStatus::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* UserStatus::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserStatus::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Notification

// required string username = 1;
inline bool Notification::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notification::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notification::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notification::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Notification::username() const {
  return *username_;
}
inline void Notification::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Notification::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Notification::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Notification::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notification::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ServerToClient

// required .PFK.Chat.ServerToClient.ServerToClientType type = 1;
inline bool ServerToClient::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerToClient::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerToClient::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerToClient::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PFK::Chat::ServerToClient_ServerToClientType ServerToClient::type() const {
  return static_cast< ::PFK::Chat::ServerToClient_ServerToClientType >(type_);
}
inline void ServerToClient::set_type(::PFK::Chat::ServerToClient_ServerToClientType value) {
  assert(::PFK::Chat::ServerToClient_ServerToClientType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PFK.Chat.UserList userList = 2;
inline bool ServerToClient::has_userlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerToClient::set_has_userlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerToClient::clear_has_userlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerToClient::clear_userlist() {
  if (userlist_ != NULL) userlist_->::PFK::Chat::UserList::Clear();
  clear_has_userlist();
}
inline const ::PFK::Chat::UserList& ServerToClient::userlist() const {
  return userlist_ != NULL ? *userlist_ : *default_instance_->userlist_;
}
inline ::PFK::Chat::UserList* ServerToClient::mutable_userlist() {
  set_has_userlist();
  if (userlist_ == NULL) userlist_ = new ::PFK::Chat::UserList;
  return userlist_;
}
inline ::PFK::Chat::UserList* ServerToClient::release_userlist() {
  clear_has_userlist();
  ::PFK::Chat::UserList* temp = userlist_;
  userlist_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_userlist(::PFK::Chat::UserList* userlist) {
  delete userlist_;
  userlist_ = userlist;
  if (userlist) {
    set_has_userlist();
  } else {
    clear_has_userlist();
  }
}

// optional .PFK.Chat.UserStatus userStatus = 3;
inline bool ServerToClient::has_userstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerToClient::set_has_userstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerToClient::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerToClient::clear_userstatus() {
  if (userstatus_ != NULL) userstatus_->::PFK::Chat::UserStatus::Clear();
  clear_has_userstatus();
}
inline const ::PFK::Chat::UserStatus& ServerToClient::userstatus() const {
  return userstatus_ != NULL ? *userstatus_ : *default_instance_->userstatus_;
}
inline ::PFK::Chat::UserStatus* ServerToClient::mutable_userstatus() {
  set_has_userstatus();
  if (userstatus_ == NULL) userstatus_ = new ::PFK::Chat::UserStatus;
  return userstatus_;
}
inline ::PFK::Chat::UserStatus* ServerToClient::release_userstatus() {
  clear_has_userstatus();
  ::PFK::Chat::UserStatus* temp = userstatus_;
  userstatus_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_userstatus(::PFK::Chat::UserStatus* userstatus) {
  delete userstatus_;
  userstatus_ = userstatus;
  if (userstatus) {
    set_has_userstatus();
  } else {
    clear_has_userstatus();
  }
}

// optional .PFK.Chat.Notification notification = 4;
inline bool ServerToClient::has_notification() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerToClient::set_has_notification() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerToClient::clear_has_notification() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerToClient::clear_notification() {
  if (notification_ != NULL) notification_->::PFK::Chat::Notification::Clear();
  clear_has_notification();
}
inline const ::PFK::Chat::Notification& ServerToClient::notification() const {
  return notification_ != NULL ? *notification_ : *default_instance_->notification_;
}
inline ::PFK::Chat::Notification* ServerToClient::mutable_notification() {
  set_has_notification();
  if (notification_ == NULL) notification_ = new ::PFK::Chat::Notification;
  return notification_;
}
inline ::PFK::Chat::Notification* ServerToClient::release_notification() {
  clear_has_notification();
  ::PFK::Chat::Notification* temp = notification_;
  notification_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_notification(::PFK::Chat::Notification* notification) {
  delete notification_;
  notification_ = notification;
  if (notification) {
    set_has_notification();
  } else {
    clear_has_notification();
  }
}

// optional .PFK.Chat.IM_Message imMessage = 5;
inline bool ServerToClient::has_immessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerToClient::set_has_immessage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerToClient::clear_has_immessage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerToClient::clear_immessage() {
  if (immessage_ != NULL) immessage_->::PFK::Chat::IM_Message::Clear();
  clear_has_immessage();
}
inline const ::PFK::Chat::IM_Message& ServerToClient::immessage() const {
  return immessage_ != NULL ? *immessage_ : *default_instance_->immessage_;
}
inline ::PFK::Chat::IM_Message* ServerToClient::mutable_immessage() {
  set_has_immessage();
  if (immessage_ == NULL) immessage_ = new ::PFK::Chat::IM_Message;
  return immessage_;
}
inline ::PFK::Chat::IM_Message* ServerToClient::release_immessage() {
  clear_has_immessage();
  ::PFK::Chat::IM_Message* temp = immessage_;
  immessage_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_immessage(::PFK::Chat::IM_Message* immessage) {
  delete immessage_;
  immessage_ = immessage;
  if (immessage) {
    set_has_immessage();
  } else {
    clear_has_immessage();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat
}  // namespace PFK

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PFK::Chat::ClientToServer_ClientToServerType>() {
  return ::PFK::Chat::ClientToServer_ClientToServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PFK::Chat::ServerToClient_ServerToClientType>() {
  return ::PFK::Chat::ServerToClient_ServerToClientType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pfkchat_2epbj__INCLUDED
