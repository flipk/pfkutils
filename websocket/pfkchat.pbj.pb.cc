// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pfkchat.pbj

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pfkchat.pbj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PFK {
namespace Chat {

namespace {

const ::google::protobuf::Descriptor* Username_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Username_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewUsername_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewUsername_reflection_ = NULL;
const ::google::protobuf::Descriptor* IM_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IM_Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientToServer_ClientToServerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClient_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerToClient_ServerToClientType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pfkchat_2epbj() {
  protobuf_AddDesc_pfkchat_2epbj();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pfkchat.pbj");
  GOOGLE_CHECK(file != NULL);
  Username_descriptor_ = file->message_type(0);
  static const int Username_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Username, username_),
  };
  Username_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Username_descriptor_,
      Username::default_instance_,
      Username_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Username, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Username, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Username));
  NewUsername_descriptor_ = file->message_type(1);
  static const int NewUsername_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUsername, oldusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUsername, newusername_),
  };
  NewUsername_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewUsername_descriptor_,
      NewUsername::default_instance_,
      NewUsername_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUsername, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUsername, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewUsername));
  IM_Message_descriptor_ = file->message_type(2);
  static const int IM_Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IM_Message, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IM_Message, msg_),
  };
  IM_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IM_Message_descriptor_,
      IM_Message::default_instance_,
      IM_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IM_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IM_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IM_Message));
  ClientToServer_descriptor_ = file->message_type(3);
  static const int ClientToServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServer, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServer, changeusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServer, immessage_),
  };
  ClientToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToServer_descriptor_,
      ClientToServer::default_instance_,
      ClientToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToServer));
  ClientToServer_ClientToServerType_descriptor_ = ClientToServer_descriptor_->enum_type(0);
  UserList_descriptor_ = file->message_type(4);
  static const int UserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, username_),
  };
  UserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserList_descriptor_,
      UserList::default_instance_,
      UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserList));
  UserStatus_descriptor_ = file->message_type(5);
  static const int UserStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, status_),
  };
  UserStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatus_descriptor_,
      UserStatus::default_instance_,
      UserStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatus));
  Notification_descriptor_ = file->message_type(6);
  static const int Notification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, username_),
  };
  Notification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notification_descriptor_,
      Notification::default_instance_,
      Notification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notification));
  ServerToClient_descriptor_ = file->message_type(7);
  static const int ServerToClient_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, changeusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, immessage_),
  };
  ServerToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClient_descriptor_,
      ServerToClient::default_instance_,
      ServerToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClient));
  ServerToClient_ServerToClientType_descriptor_ = ServerToClient_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pfkchat_2epbj);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Username_descriptor_, &Username::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewUsername_descriptor_, &NewUsername::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IM_Message_descriptor_, &IM_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToServer_descriptor_, &ClientToServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserList_descriptor_, &UserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatus_descriptor_, &UserStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notification_descriptor_, &Notification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClient_descriptor_, &ServerToClient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pfkchat_2epbj() {
  delete Username::default_instance_;
  delete Username_reflection_;
  delete NewUsername::default_instance_;
  delete NewUsername_reflection_;
  delete IM_Message::default_instance_;
  delete IM_Message_reflection_;
  delete ClientToServer::default_instance_;
  delete ClientToServer_reflection_;
  delete UserList::default_instance_;
  delete UserList_reflection_;
  delete UserStatus::default_instance_;
  delete UserStatus_reflection_;
  delete Notification::default_instance_;
  delete Notification_reflection_;
  delete ServerToClient::default_instance_;
  delete ServerToClient_reflection_;
}

void protobuf_AddDesc_pfkchat_2epbj() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013pfkchat.pbj\022\010PFK.Chat\"\034\n\010Username\022\020\n\010u"
    "sername\030\001 \002(\t\"7\n\013NewUsername\022\023\n\013oldusern"
    "ame\030\001 \002(\t\022\023\n\013newusername\030\002 \002(\t\"+\n\nIM_Mes"
    "sage\022\020\n\010username\030\001 \002(\t\022\013\n\003msg\030\002 \002(\t\"\226\002\n\016"
    "ClientToServer\0229\n\004type\030\001 \002(\0162+.PFK.Chat."
    "ClientToServer.ClientToServerType\022!\n\005log"
    "in\030\002 \001(\0132\022.PFK.Chat.Username\022-\n\016changeUs"
    "ername\030\003 \001(\0132\025.PFK.Chat.NewUsername\022\'\n\ti"
    "mMessage\030\004 \001(\0132\024.PFK.Chat.IM_Message\"N\n\022"
    "ClientToServerType\022\t\n\005LOGIN\020\001\022\023\n\017CHANGE_"
    "USERNAME\020\002\022\016\n\nIM_MESSAGE\020\003\022\010\n\004PING\020\004\"\034\n\010"
    "UserList\022\020\n\010username\030\001 \003(\t\".\n\nUserStatus"
    "\022\020\n\010username\030\001 \003(\t\022\016\n\006status\030\002 \002(\t\" \n\014No"
    "tification\022\020\n\010username\030\001 \002(\t\"\256\003\n\016ServerT"
    "oClient\0229\n\004type\030\001 \002(\0162+.PFK.Chat.ServerT"
    "oClient.ServerToClientType\022$\n\010userList\030\002"
    " \001(\0132\022.PFK.Chat.UserList\022(\n\nuserStatus\030\003"
    " \001(\0132\024.PFK.Chat.UserStatus\022,\n\014notificati"
    "on\030\004 \001(\0132\026.PFK.Chat.Notification\022-\n\016chan"
    "geUsername\030\005 \001(\0132\025.PFK.Chat.NewUsername\022"
    "\'\n\timMessage\030\006 \001(\0132\024.PFK.Chat.IM_Message"
    "\"\212\001\n\022ServerToClientType\022\r\n\tUSER_LIST\020\001\022\017"
    "\n\013USER_STATUS\020\002\022\026\n\022LOGIN_NOTIFICATION\020\003\022"
    "\027\n\023LOGOUT_NOTIFICATION\020\004\022\023\n\017CHANGE_USERN"
    "AME\020\005\022\016\n\nIM_MESSAGE\020\006", 981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pfkchat.pbj", &protobuf_RegisterTypes);
  Username::default_instance_ = new Username();
  NewUsername::default_instance_ = new NewUsername();
  IM_Message::default_instance_ = new IM_Message();
  ClientToServer::default_instance_ = new ClientToServer();
  UserList::default_instance_ = new UserList();
  UserStatus::default_instance_ = new UserStatus();
  Notification::default_instance_ = new Notification();
  ServerToClient::default_instance_ = new ServerToClient();
  Username::default_instance_->InitAsDefaultInstance();
  NewUsername::default_instance_->InitAsDefaultInstance();
  IM_Message::default_instance_->InitAsDefaultInstance();
  ClientToServer::default_instance_->InitAsDefaultInstance();
  UserList::default_instance_->InitAsDefaultInstance();
  UserStatus::default_instance_->InitAsDefaultInstance();
  Notification::default_instance_->InitAsDefaultInstance();
  ServerToClient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pfkchat_2epbj);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pfkchat_2epbj {
  StaticDescriptorInitializer_pfkchat_2epbj() {
    protobuf_AddDesc_pfkchat_2epbj();
  }
} static_descriptor_initializer_pfkchat_2epbj_;

// ===================================================================

#ifndef _MSC_VER
const int Username::kUsernameFieldNumber;
#endif  // !_MSC_VER

Username::Username()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Username::InitAsDefaultInstance() {
}

Username::Username(const Username& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Username::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Username::~Username() {
  SharedDtor();
}

void Username::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Username::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Username::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Username_descriptor_;
}

const Username& Username::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

Username* Username::default_instance_ = NULL;

Username* Username::New() const {
  return new Username;
}

void Username::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Username::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Username::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Username::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Username::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Username::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Username* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Username*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Username::MergeFrom(const Username& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Username::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Username::CopyFrom(const Username& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Username::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Username::Swap(Username* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Username::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Username_descriptor_;
  metadata.reflection = Username_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewUsername::kOldusernameFieldNumber;
const int NewUsername::kNewusernameFieldNumber;
#endif  // !_MSC_VER

NewUsername::NewUsername()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewUsername::InitAsDefaultInstance() {
}

NewUsername::NewUsername(const NewUsername& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewUsername::SharedCtor() {
  _cached_size_ = 0;
  oldusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewUsername::~NewUsername() {
  SharedDtor();
}

void NewUsername::SharedDtor() {
  if (oldusername_ != &::google::protobuf::internal::kEmptyString) {
    delete oldusername_;
  }
  if (newusername_ != &::google::protobuf::internal::kEmptyString) {
    delete newusername_;
  }
  if (this != default_instance_) {
  }
}

void NewUsername::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewUsername::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewUsername_descriptor_;
}

const NewUsername& NewUsername::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

NewUsername* NewUsername::default_instance_ = NULL;

NewUsername* NewUsername::New() const {
  return new NewUsername;
}

void NewUsername::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_oldusername()) {
      if (oldusername_ != &::google::protobuf::internal::kEmptyString) {
        oldusername_->clear();
      }
    }
    if (has_newusername()) {
      if (newusername_ != &::google::protobuf::internal::kEmptyString) {
        newusername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewUsername::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string oldusername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldusername().data(), this->oldusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newusername;
        break;
      }

      // required string newusername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newusername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newusername().data(), this->newusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewUsername::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string oldusername = 1;
  if (has_oldusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldusername().data(), this->oldusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->oldusername(), output);
  }

  // required string newusername = 2;
  if (has_newusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newusername().data(), this->newusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newusername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewUsername::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string oldusername = 1;
  if (has_oldusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldusername().data(), this->oldusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->oldusername(), target);
  }

  // required string newusername = 2;
  if (has_newusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newusername().data(), this->newusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newusername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewUsername::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string oldusername = 1;
    if (has_oldusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldusername());
    }

    // required string newusername = 2;
    if (has_newusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newusername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewUsername::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewUsername* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewUsername*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewUsername::MergeFrom(const NewUsername& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldusername()) {
      set_oldusername(from.oldusername());
    }
    if (from.has_newusername()) {
      set_newusername(from.newusername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewUsername::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewUsername::CopyFrom(const NewUsername& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUsername::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NewUsername::Swap(NewUsername* other) {
  if (other != this) {
    std::swap(oldusername_, other->oldusername_);
    std::swap(newusername_, other->newusername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewUsername::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewUsername_descriptor_;
  metadata.reflection = NewUsername_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IM_Message::kUsernameFieldNumber;
const int IM_Message::kMsgFieldNumber;
#endif  // !_MSC_VER

IM_Message::IM_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IM_Message::InitAsDefaultInstance() {
}

IM_Message::IM_Message(const IM_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IM_Message::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IM_Message::~IM_Message() {
  SharedDtor();
}

void IM_Message::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void IM_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IM_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IM_Message_descriptor_;
}

const IM_Message& IM_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

IM_Message* IM_Message::default_instance_ = NULL;

IM_Message* IM_Message::New() const {
  return new IM_Message;
}

void IM_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IM_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IM_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IM_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IM_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IM_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IM_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IM_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IM_Message::MergeFrom(const IM_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IM_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IM_Message::CopyFrom(const IM_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IM_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IM_Message::Swap(IM_Message* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IM_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IM_Message_descriptor_;
  metadata.reflection = IM_Message_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientToServer_ClientToServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToServer_ClientToServerType_descriptor_;
}
bool ClientToServer_ClientToServerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientToServer_ClientToServerType ClientToServer::LOGIN;
const ClientToServer_ClientToServerType ClientToServer::CHANGE_USERNAME;
const ClientToServer_ClientToServerType ClientToServer::IM_MESSAGE;
const ClientToServer_ClientToServerType ClientToServer::PING;
const ClientToServer_ClientToServerType ClientToServer::ClientToServerType_MIN;
const ClientToServer_ClientToServerType ClientToServer::ClientToServerType_MAX;
const int ClientToServer::ClientToServerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientToServer::kTypeFieldNumber;
const int ClientToServer::kLoginFieldNumber;
const int ClientToServer::kChangeUsernameFieldNumber;
const int ClientToServer::kImMessageFieldNumber;
#endif  // !_MSC_VER

ClientToServer::ClientToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToServer::InitAsDefaultInstance() {
  login_ = const_cast< ::PFK::Chat::Username*>(&::PFK::Chat::Username::default_instance());
  changeusername_ = const_cast< ::PFK::Chat::NewUsername*>(&::PFK::Chat::NewUsername::default_instance());
  immessage_ = const_cast< ::PFK::Chat::IM_Message*>(&::PFK::Chat::IM_Message::default_instance());
}

ClientToServer::ClientToServer(const ClientToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  login_ = NULL;
  changeusername_ = NULL;
  immessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServer::~ClientToServer() {
  SharedDtor();
}

void ClientToServer::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete changeusername_;
    delete immessage_;
  }
}

void ClientToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToServer_descriptor_;
}

const ClientToServer& ClientToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

ClientToServer* ClientToServer::default_instance_ = NULL;

ClientToServer* ClientToServer::New() const {
  return new ClientToServer;
}

void ClientToServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_login()) {
      if (login_ != NULL) login_->::PFK::Chat::Username::Clear();
    }
    if (has_changeusername()) {
      if (changeusername_ != NULL) changeusername_->::PFK::Chat::NewUsername::Clear();
    }
    if (has_immessage()) {
      if (immessage_ != NULL) immessage_->::PFK::Chat::IM_Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PFK.Chat.ClientToServer.ClientToServerType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PFK::Chat::ClientToServer_ClientToServerType_IsValid(value)) {
            set_type(static_cast< ::PFK::Chat::ClientToServer_ClientToServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional .PFK.Chat.Username login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_changeUsername;
        break;
      }

      // optional .PFK.Chat.NewUsername changeUsername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeUsername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeusername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_imMessage;
        break;
      }

      // optional .PFK.Chat.IM_Message imMessage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_immessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PFK.Chat.ClientToServer.ClientToServerType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PFK.Chat.Username login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->login(), output);
  }

  // optional .PFK.Chat.NewUsername changeUsername = 3;
  if (has_changeusername()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->changeusername(), output);
  }

  // optional .PFK.Chat.IM_Message imMessage = 4;
  if (has_immessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->immessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PFK.Chat.ClientToServer.ClientToServerType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PFK.Chat.Username login = 2;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->login(), target);
  }

  // optional .PFK.Chat.NewUsername changeUsername = 3;
  if (has_changeusername()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->changeusername(), target);
  }

  // optional .PFK.Chat.IM_Message imMessage = 4;
  if (has_immessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->immessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PFK.Chat.ClientToServer.ClientToServerType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PFK.Chat.Username login = 2;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .PFK.Chat.NewUsername changeUsername = 3;
    if (has_changeusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeusername());
    }

    // optional .PFK.Chat.IM_Message imMessage = 4;
    if (has_immessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->immessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToServer::MergeFrom(const ClientToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_login()) {
      mutable_login()->::PFK::Chat::Username::MergeFrom(from.login());
    }
    if (from.has_changeusername()) {
      mutable_changeusername()->::PFK::Chat::NewUsername::MergeFrom(from.changeusername());
    }
    if (from.has_immessage()) {
      mutable_immessage()->::PFK::Chat::IM_Message::MergeFrom(from.immessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer::CopyFrom(const ClientToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_changeusername()) {
    if (!this->changeusername().IsInitialized()) return false;
  }
  if (has_immessage()) {
    if (!this->immessage().IsInitialized()) return false;
  }
  return true;
}

void ClientToServer::Swap(ClientToServer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(login_, other->login_);
    std::swap(changeusername_, other->changeusername_);
    std::swap(immessage_, other->immessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToServer_descriptor_;
  metadata.reflection = ClientToServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserList::kUsernameFieldNumber;
#endif  // !_MSC_VER

UserList::UserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserList::InitAsDefaultInstance() {
}

UserList::UserList(const UserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserList::~UserList() {
  SharedDtor();
}

void UserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserList_descriptor_;
}

const UserList& UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

UserList* UserList::default_instance_ = NULL;

UserList* UserList::New() const {
  return new UserList;
}

void UserList::Clear() {
  username_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username(this->username_size() - 1).data(),
            this->username(this->username_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_username;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string username = 1;
  for (int i = 0; i < this->username_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->username(i).data(), this->username(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string username = 1;
  for (int i = 0; i < this->username_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username(i).data(), this->username(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->username(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserList::ByteSize() const {
  int total_size = 0;

  // repeated string username = 1;
  total_size += 1 * this->username_size();
  for (int i = 0; i < this->username_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->username(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  username_.MergeFrom(from.username_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {

  return true;
}

void UserList::Swap(UserList* other) {
  if (other != this) {
    username_.Swap(&other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserList_descriptor_;
  metadata.reflection = UserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatus::kUsernameFieldNumber;
const int UserStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

UserStatus::UserStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStatus::InitAsDefaultInstance() {
}

UserStatus::UserStatus(const UserStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatus::~UserStatus() {
  SharedDtor();
}

void UserStatus::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void UserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatus_descriptor_;
}

const UserStatus& UserStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

UserStatus* UserStatus::default_instance_ = NULL;

UserStatus* UserStatus::New() const {
  return new UserStatus;
}

void UserStatus::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
  }
  username_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username(this->username_size() - 1).data(),
            this->username(this->username_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_username;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required string status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string username = 1;
  for (int i = 0; i < this->username_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->username(i).data(), this->username(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(i), output);
  }

  // required string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string username = 1;
  for (int i = 0; i < this->username_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username(i).data(), this->username(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->username(i), target);
  }

  // required string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

  }
  // repeated string username = 1;
  total_size += 1 * this->username_size();
  for (int i = 0; i < this->username_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->username(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatus::MergeFrom(const UserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  username_.MergeFrom(from.username_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatus::CopyFrom(const UserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void UserStatus::Swap(UserStatus* other) {
  if (other != this) {
    username_.Swap(&other->username_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatus_descriptor_;
  metadata.reflection = UserStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Notification::kUsernameFieldNumber;
#endif  // !_MSC_VER

Notification::Notification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Notification::InitAsDefaultInstance() {
}

Notification::Notification(const Notification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Notification::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notification::~Notification() {
  SharedDtor();
}

void Notification::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notification_descriptor_;
}

const Notification& Notification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

Notification* Notification::default_instance_ = NULL;

Notification* Notification::New() const {
  return new Notification;
}

void Notification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Notification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Notification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Notification::Swap(Notification* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notification_descriptor_;
  metadata.reflection = Notification_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerToClient_ServerToClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClient_ServerToClientType_descriptor_;
}
bool ServerToClient_ServerToClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerToClient_ServerToClientType ServerToClient::USER_LIST;
const ServerToClient_ServerToClientType ServerToClient::USER_STATUS;
const ServerToClient_ServerToClientType ServerToClient::LOGIN_NOTIFICATION;
const ServerToClient_ServerToClientType ServerToClient::LOGOUT_NOTIFICATION;
const ServerToClient_ServerToClientType ServerToClient::CHANGE_USERNAME;
const ServerToClient_ServerToClientType ServerToClient::IM_MESSAGE;
const ServerToClient_ServerToClientType ServerToClient::ServerToClientType_MIN;
const ServerToClient_ServerToClientType ServerToClient::ServerToClientType_MAX;
const int ServerToClient::ServerToClientType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerToClient::kTypeFieldNumber;
const int ServerToClient::kUserListFieldNumber;
const int ServerToClient::kUserStatusFieldNumber;
const int ServerToClient::kNotificationFieldNumber;
const int ServerToClient::kChangeUsernameFieldNumber;
const int ServerToClient::kImMessageFieldNumber;
#endif  // !_MSC_VER

ServerToClient::ServerToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClient::InitAsDefaultInstance() {
  userlist_ = const_cast< ::PFK::Chat::UserList*>(&::PFK::Chat::UserList::default_instance());
  userstatus_ = const_cast< ::PFK::Chat::UserStatus*>(&::PFK::Chat::UserStatus::default_instance());
  notification_ = const_cast< ::PFK::Chat::Notification*>(&::PFK::Chat::Notification::default_instance());
  changeusername_ = const_cast< ::PFK::Chat::NewUsername*>(&::PFK::Chat::NewUsername::default_instance());
  immessage_ = const_cast< ::PFK::Chat::IM_Message*>(&::PFK::Chat::IM_Message::default_instance());
}

ServerToClient::ServerToClient(const ServerToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClient::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  userlist_ = NULL;
  userstatus_ = NULL;
  notification_ = NULL;
  changeusername_ = NULL;
  immessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClient::~ServerToClient() {
  SharedDtor();
}

void ServerToClient::SharedDtor() {
  if (this != default_instance_) {
    delete userlist_;
    delete userstatus_;
    delete notification_;
    delete changeusername_;
    delete immessage_;
  }
}

void ServerToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClient_descriptor_;
}

const ServerToClient& ServerToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pfkchat_2epbj();
  return *default_instance_;
}

ServerToClient* ServerToClient::default_instance_ = NULL;

ServerToClient* ServerToClient::New() const {
  return new ServerToClient;
}

void ServerToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_userlist()) {
      if (userlist_ != NULL) userlist_->::PFK::Chat::UserList::Clear();
    }
    if (has_userstatus()) {
      if (userstatus_ != NULL) userstatus_->::PFK::Chat::UserStatus::Clear();
    }
    if (has_notification()) {
      if (notification_ != NULL) notification_->::PFK::Chat::Notification::Clear();
    }
    if (has_changeusername()) {
      if (changeusername_ != NULL) changeusername_->::PFK::Chat::NewUsername::Clear();
    }
    if (has_immessage()) {
      if (immessage_ != NULL) immessage_->::PFK::Chat::IM_Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PFK.Chat.ServerToClient.ServerToClientType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PFK::Chat::ServerToClient_ServerToClientType_IsValid(value)) {
            set_type(static_cast< ::PFK::Chat::ServerToClient_ServerToClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userList;
        break;
      }

      // optional .PFK.Chat.UserList userList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userStatus;
        break;
      }

      // optional .PFK.Chat.UserStatus userStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notification;
        break;
      }

      // optional .PFK.Chat.Notification notification = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_changeUsername;
        break;
      }

      // optional .PFK.Chat.NewUsername changeUsername = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeUsername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeusername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_imMessage;
        break;
      }

      // optional .PFK.Chat.IM_Message imMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_immessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PFK.Chat.ServerToClient.ServerToClientType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PFK.Chat.UserList userList = 2;
  if (has_userlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userlist(), output);
  }

  // optional .PFK.Chat.UserStatus userStatus = 3;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userstatus(), output);
  }

  // optional .PFK.Chat.Notification notification = 4;
  if (has_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->notification(), output);
  }

  // optional .PFK.Chat.NewUsername changeUsername = 5;
  if (has_changeusername()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->changeusername(), output);
  }

  // optional .PFK.Chat.IM_Message imMessage = 6;
  if (has_immessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->immessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PFK.Chat.ServerToClient.ServerToClientType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PFK.Chat.UserList userList = 2;
  if (has_userlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userlist(), target);
  }

  // optional .PFK.Chat.UserStatus userStatus = 3;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userstatus(), target);
  }

  // optional .PFK.Chat.Notification notification = 4;
  if (has_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->notification(), target);
  }

  // optional .PFK.Chat.NewUsername changeUsername = 5;
  if (has_changeusername()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->changeusername(), target);
  }

  // optional .PFK.Chat.IM_Message imMessage = 6;
  if (has_immessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->immessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PFK.Chat.ServerToClient.ServerToClientType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PFK.Chat.UserList userList = 2;
    if (has_userlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userlist());
    }

    // optional .PFK.Chat.UserStatus userStatus = 3;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userstatus());
    }

    // optional .PFK.Chat.Notification notification = 4;
    if (has_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notification());
    }

    // optional .PFK.Chat.NewUsername changeUsername = 5;
    if (has_changeusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeusername());
    }

    // optional .PFK.Chat.IM_Message imMessage = 6;
    if (has_immessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->immessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClient::MergeFrom(const ServerToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userlist()) {
      mutable_userlist()->::PFK::Chat::UserList::MergeFrom(from.userlist());
    }
    if (from.has_userstatus()) {
      mutable_userstatus()->::PFK::Chat::UserStatus::MergeFrom(from.userstatus());
    }
    if (from.has_notification()) {
      mutable_notification()->::PFK::Chat::Notification::MergeFrom(from.notification());
    }
    if (from.has_changeusername()) {
      mutable_changeusername()->::PFK::Chat::NewUsername::MergeFrom(from.changeusername());
    }
    if (from.has_immessage()) {
      mutable_immessage()->::PFK::Chat::IM_Message::MergeFrom(from.immessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient::CopyFrom(const ServerToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userstatus()) {
    if (!this->userstatus().IsInitialized()) return false;
  }
  if (has_notification()) {
    if (!this->notification().IsInitialized()) return false;
  }
  if (has_changeusername()) {
    if (!this->changeusername().IsInitialized()) return false;
  }
  if (has_immessage()) {
    if (!this->immessage().IsInitialized()) return false;
  }
  return true;
}

void ServerToClient::Swap(ServerToClient* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(userlist_, other->userlist_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(notification_, other->notification_);
    std::swap(changeusername_, other->changeusername_);
    std::swap(immessage_, other->immessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClient_descriptor_;
  metadata.reflection = ServerToClient_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat
}  // namespace PFK

// @@protoc_insertion_point(global_scope)
