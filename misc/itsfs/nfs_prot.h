/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

/*
 * NOTE: THIS FILE IS NOT IDENTICAL TO THAT PRODUCED BY 'rpcgen'.
 *       IT HAS BEEN EDITED FOR TYPEDEFS AND PROTOTYPES TO BE COMPATIBLE
 *       WITH THE NFS SERVER FRAMEWORK.
 */

#ifndef _NFS_PROT_H_RPCGEN
#define _NFS_PROT_H_RPCGEN

#ifdef __cplusplus
extern "C" {
#endif

#include "xdr.h"

#define NFS_PORT 2049
#define NFS_MAXDATA 8192
#define NFS_MAXPATHLEN 1024
#define NFS_MAXNAMLEN 255
#define NFS_FHSIZE 32
#define NFS_COOKIESIZE 4
#define NFS_FIFO_DEV -1
#define NFSMODE_FMT 0170000
#define NFSMODE_DIR 0040000
#define NFSMODE_CHR 0020000
#define NFSMODE_BLK 0060000
#define NFSMODE_REG 0100000
#define NFSMODE_LNK 0120000
#define NFSMODE_SOCK 0140000
#define NFSMODE_FIFO 0010000

enum nfsstat {
    NFS_OK = 0,
    NFSERR_PERM = 1,
    NFSERR_NOENT = 2,
    NFSERR_IO = 5,
    NFSERR_NXIO = 6,
    NFSERR_ACCES = 13,
    NFSERR_EXIST = 17,
    NFSERR_NODEV = 19,
    NFSERR_NOTDIR = 20,
    NFSERR_ISDIR = 21,
    NFSERR_FBIG = 27,
    NFSERR_NOSPC = 28,
    NFSERR_ROFS = 30,
    NFSERR_NAMETOOLONG = 63,
    NFSERR_NOTEMPTY = 66,
    NFSERR_DQUOT = 69,
    NFSERR_STALE = 70,
    NFSERR_WFLUSH = 99
};
typedef enum nfsstat nfsstat;

enum ftype {
    NFNON = 0,
    NFREG = 1,
    NFDIR = 2,
    NFBLK = 3,
    NFCHR = 4,
    NFLNK = 5,
    NFSOCK = 6,
    NFBAD = 7,
    NFFIFO = 8
};
typedef enum ftype ftype;

struct nfs_fh {
    uchar data[NFS_FHSIZE];
};
typedef struct nfs_fh nfs_fh;

struct nfstime {
    u_int seconds;
    u_int useconds;
};
typedef struct nfstime nfstime;

struct fattr {
    ftype type;
    u_int mode;
    u_int nlink;
    u_int uid;
    u_int gid;
    u_int size;
    u_int blocksize;
    u_int rdev;
    u_int blocks;
    u_int fsid;
    u_int fileid;
    nfstime atime;
    nfstime mtime;
    nfstime ctime;
};
typedef struct fattr fattr;

struct sattr {
    u_int mode;
    u_int uid;
    u_int gid;
    u_int size;
    nfstime atime;
    nfstime mtime;
};
typedef struct sattr sattr;

typedef uchar *filename;

typedef uchar *nfspath;

struct attrstat {
    nfsstat status;
    union {
        fattr attributes;
    } attrstat_u;
};
typedef struct attrstat attrstat;

struct sattrargs {
    nfs_fh file;
    sattr attributes;
};
typedef struct sattrargs sattrargs;

struct diropargs {
    nfs_fh dir;
    filename name;
};
typedef struct diropargs diropargs;

struct diropokres {
    nfs_fh file;
    fattr attributes;
};
typedef struct diropokres diropokres;

struct diropres {
    nfsstat status;
    union {
        diropokres diropres;
    } diropres_u;
};
typedef struct diropres diropres;

struct readlinkres {
    nfsstat status;
    union {
        nfspath data;
    } readlinkres_u;
};
typedef struct readlinkres readlinkres;

struct readargs {
    nfs_fh file;
    u_int offset;
    u_int count;
    u_int totalcount;
};
typedef struct readargs readargs;

struct readokres {
    fattr attributes;
    struct {
        u_int data_len;
        uchar *data_val;
    } data;
};
typedef struct readokres readokres;

struct readres {
    nfsstat status;
    union {
        readokres reply;
    } readres_u;
};
typedef struct readres readres;

struct writeargs {
    nfs_fh file;
    u_int beginoffset;
    u_int offset;
    u_int totalcount;
    struct {
        u_int data_len;
        uchar *data_val;
    } data;
};
typedef struct writeargs writeargs;

struct createargs {
    diropargs where;
    sattr attributes;
};
typedef struct createargs createargs;

struct renameargs {
    diropargs from;
    diropargs to;
};
typedef struct renameargs renameargs;

struct linkargs {
    nfs_fh from;
    diropargs to;
};
typedef struct linkargs linkargs;

struct symlinkargs {
    diropargs from;
    nfspath to;
    sattr attributes;
};
typedef struct symlinkargs symlinkargs;

typedef uchar nfscookie[NFS_COOKIESIZE];

struct readdirargs {
    nfs_fh dir;
    nfscookie cookie;
    u_int count;
};
typedef struct readdirargs readdirargs;

struct entry {
    u_int fileid;
    filename name;
    nfscookie cookie;
    struct entry *nextentry;
};
typedef struct entry entry;

struct dirlist {
    entry *entries;
    bool_t eof;
};
typedef struct dirlist dirlist;

struct readdirres {
    nfsstat status;
    union {
        dirlist reply;
    } readdirres_u;
};
typedef struct readdirres readdirres;

struct statfsokres {
    u_int tsize;
    u_int bsize;
    u_int blocks;
    u_int bfree;
    u_int bavail;
};
typedef struct statfsokres statfsokres;

struct statfsres {
    nfsstat status;
    union {
        statfsokres reply;
    } statfsres_u;
};
typedef struct statfsres statfsres;

#define NFS_PROGRAM ((unsigned long)(100003))
#define NFS_VERSION ((unsigned long)(2))

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t myxdr_nfsstat(XDR *, nfsstat*);
extern  bool_t myxdr_ftype(XDR *, ftype*);
extern  bool_t myxdr_nfs_fh(XDR *, nfs_fh*);
extern  bool_t myxdr_nfstime(XDR *, nfstime*);
extern  bool_t myxdr_fattr(XDR *, fattr*);
extern  bool_t myxdr_sattr(XDR *, sattr*);
extern  bool_t myxdr_filename(XDR *, filename*);
extern  bool_t myxdr_nfspath(XDR *, nfspath*);
extern  bool_t myxdr_attrstat(XDR *, attrstat*);
extern  bool_t myxdr_sattrargs(XDR *, sattrargs*);
extern  bool_t myxdr_diropargs(XDR *, diropargs*);
extern  bool_t myxdr_diropokres(XDR *, diropokres*);
extern  bool_t myxdr_diropres(XDR *, diropres*);
extern  bool_t myxdr_readlinkres(XDR *, readlinkres*);
extern  bool_t myxdr_readargs(XDR *, readargs*);
extern  bool_t myxdr_readokres(XDR *, readokres*);
extern  bool_t myxdr_readres(XDR *, readres*);
extern  bool_t myxdr_writeargs(XDR *, writeargs*);
extern  bool_t myxdr_createargs(XDR *, createargs*);
extern  bool_t myxdr_renameargs(XDR *, renameargs*);
extern  bool_t myxdr_linkargs(XDR *, linkargs*);
extern  bool_t myxdr_symlinkargs(XDR *, symlinkargs*);
extern  bool_t myxdr_nfscookie(XDR *, nfscookie);
extern  bool_t myxdr_readdirargs(XDR *, readdirargs*);
extern  bool_t myxdr_entry(XDR *, entry*);
extern  bool_t myxdr_dirlist(XDR *, dirlist*);
extern  bool_t myxdr_readdirres(XDR *, readdirres*);
extern  bool_t myxdr_statfsokres(XDR *, statfsokres*);
extern  bool_t myxdr_statfsres(XDR *, statfsres*);

#else /* K&R C */
extern bool_t myxdr_nfsstat();
extern bool_t myxdr_ftype();
extern bool_t myxdr_nfs_fh();
extern bool_t myxdr_nfstime();
extern bool_t myxdr_fattr();
extern bool_t myxdr_sattr();
extern bool_t myxdr_filename();
extern bool_t myxdr_nfspath();
extern bool_t myxdr_attrstat();
extern bool_t myxdr_sattrargs();
extern bool_t myxdr_diropargs();
extern bool_t myxdr_diropokres();
extern bool_t myxdr_diropres();
extern bool_t myxdr_readlinkres();
extern bool_t myxdr_readargs();
extern bool_t myxdr_readokres();
extern bool_t myxdr_readres();
extern bool_t myxdr_writeargs();
extern bool_t myxdr_createargs();
extern bool_t myxdr_renameargs();
extern bool_t myxdr_linkargs();
extern bool_t myxdr_symlinkargs();
extern bool_t myxdr_nfscookie();
extern bool_t myxdr_readdirargs();
extern bool_t myxdr_entry();
extern bool_t myxdr_dirlist();
extern bool_t myxdr_readdirres();
extern bool_t myxdr_statfsokres();
extern bool_t myxdr_statfsres();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NFS_PROT_H_RPCGEN */
