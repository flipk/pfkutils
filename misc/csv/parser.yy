/* -*- Mode:c++; eval:(c-set-style "BSD"); c-basic-offset:4; indent-tabs-mode:nil; tab-width:8 -*- */

%{

#include <string>
#include <iostream>
#include "../tokenizer.h"
#include "../parser.h"
#ifndef DEPENDING
#include TOKENIZER_LL_HDR
#endif

extern int yylex( void );
extern void yyerror( csvfile *f, const std::string e );
extern int yylineno; // autogenerated by flex

#define YYDEBUG 1

using namespace std;

%}

%union
{
    std::string  * word;
    struct csvfield * field;
    struct csvline * line;
}

%parse-param {csvfile *file}

%token COMMA WORD QUOTE NEWLINE

%type <word>  WORD
%type <field> FIELD FIELDS
%type <line>  LINE

%start CSV_FILE

%%

CSV_FILE
    : LINE
    {
        file->add_line($1);
    }
    | CSV_FILE LINE
    {
        file->add_line($2);
    }
    ;

LINE
    : NEWLINE
    {
        $$ = new csvline(NULL);
    }
    | FIELDS NEWLINE
    {
        $$ = new csvline($1);
    }
    ;

FIELDS
    : FIELD
    {
        $$ = $1;        
    }
    | FIELD COMMA FIELDS
    {
        $$ = $1;
        $$->next = $3;
    }
    ;

FIELD
    : /*blank*/
    {
        $$ = new csvfield;
    }
    | FIELD WORD
    {
        $$ = $1;
        $$->append(*$2);
        delete $2;
    }
    | FIELD QUOTE
    {
        $$ = $1;
        $$->append("\"");
    }
    ;

%%

void
yyerror( csvfile *f, const string e )
{
    fprintf(stderr, "error: %d: %s\n", yylineno, e.c_str());
    exit( 1 );
}

csvline *
parse_file(FILE *in)
{
    csvfile f;
    tokenizer_init(in);
    yyparse(&f);
    return f.lines;
}
